{"version":3,"sources":["images/html-5.svg","images/css-3.svg","images/javascript-4.svg","images/bootstrap-4.svg","images/sass.svg","images/npm.svg","images/git.svg","images/mern2.png","images/AWS_logo.png","images/AWS_Cloud_Prac.png","Home.js","NavBar.js","About.js","ProjectComponents/Boarpp.js","ProjectComponents/Calculator.js","ProjectComponents/SalaryCalc.js","ProjectComponents/CheatSheet.js","ProjectComponents/PortfolioWebsite.js","ProjectComponents/MERN_basic.js","ProjectComponents/Lyrics.js","Projects.js","Blog.js","Resources.js","images/memes/MachineLearning.jpeg","images/memes/EwWelJGWEAAR56k.jpeg","images/memes/mountain.png","images/memes/newJob.png","images/memes/stackOFCopyPaste.jpeg","Humour.js","Contact.js","ArticlesComponents/DeployingReact.js","Notes.js","ArticlesComponents/AsnycJSArticle.js","ArticlesComponents/EnginesAndRuntime.js","ArticlesComponents/ComponentTypes.js","ArticlesComponents/MERNSetUp1.js","ArticlesComponents/MERNSetUp2.js","ArticlesComponents/MERNSetUp3.js","ArticlesComponents/MERNSetUp4.js","ArticlesComponents/GraphQL.js","ArticlesComponents/GitCommands.js","ArticlesComponents/MernToHeroku.js","App.js","reportWebVitals.js","ScrollIntoView.js","index.js"],"names":["Home","Container","Row","Col","md","span","offset","className","src","mern","alt","html","css","javascript","npm","git","aws","awsPractitioner","bootstrap","sass","React","Component","NavBar","useState","expanded","setExpanded","Navbar","fixed","expand","Brand","onClick","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","About","href","target","rel","Boarpp","readMore","setReadMore","extraContent","linkName","window","open","Calculator","SalaryCalc","CheatSheet","PortfolioWebsite","MernBasic","Lyrics","Projects","Blog","Resources","Contact","meme1","meme2","meme3","meme4","meme5","DeployingReact","articleName","Notes","AsyncJSArticle","EnginesAndRuntime","ComponentTypes","MERNSetUp1","MERNSetUp2","MERNSetUp3","MERNSetUp4","GraphQL","GitCommands","MernToHeroku","App","path","component","exact","Humour","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollIntoView","componentDidMount","scrollTo","componentDidUpdate","prevProps","props","location","render","children","PureComponent","withRouter","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.65fcccee.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/html-5.821ba738.svg\";","export default __webpack_public_path__ + \"static/media/css-3.d5739401.svg\";","export default __webpack_public_path__ + \"static/media/javascript-4.13ceb963.svg\";","export default __webpack_public_path__ + \"static/media/bootstrap-4.997c463d.svg\";","export default __webpack_public_path__ + \"static/media/sass.8aa78a83.svg\";","export default __webpack_public_path__ + \"static/media/npm.5066c092.svg\";","export default __webpack_public_path__ + \"static/media/git.50214827.svg\";","export default __webpack_public_path__ + \"static/media/mern2.5488f6d4.png\";","export default __webpack_public_path__ + \"static/media/AWS_logo.84d24e4e.png\";","export default __webpack_public_path__ + \"static/media/AWS_Cloud_Prac.2fa1fd9b.png\";","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\n//Local images:\nimport html from \"./images/html-5.svg\";\nimport css from \"./images/css-3.svg\";\nimport javascript from \"./images/javascript-4.svg\";\nimport bootstrap from \"./images/bootstrap-4.svg\";\nimport sass from \"./images/sass.svg\";\nimport npm from \"./images/npm.svg\";\nimport git from \"./images/git.svg\";\nimport mern from \"./images/mern2.png\";\nimport aws from \"./images/AWS_logo.png\";\nimport awsPractitioner from \"./images/AWS_Cloud_Prac.png\";\n\n\nclass Home extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col md={{ span: 8, offset: 2 }}>\n            <div className=\"title\">\n              <h1>Stephen Doyle</h1>\n              <h1>Developer</h1>\n            </div>\n            <div className=\"images\">\n              <img className=\"logos1\" src={mern} alt=\"MERN\" />\n              <br />\n              \n\n              <br />\n              <img className=\"logos2_1\" src={html} alt=\"HTML5\" />\n              <img className=\"logos2_1\" src={css} alt=\"CSS3\" />\n              <img className=\"logos2_1\" src={javascript} alt=\"JavaScript\" />\n              <br />\n              <img className=\"logos2\" src={npm} alt=\"NPM\" />\n              <br />\n              <img className=\"logos2\" src={git} alt=\"Git\" />\n              <br />\n              \n              <img className=\"logos3\" src={aws} alt=\"AWS\" />\n              <img className=\"logos4\" src={awsPractitioner} alt=\"AWS Cloud Practitioner\" />\n              <br/>\n\n              <img className=\"logos2_2\" src={bootstrap} alt=\"Bootstrap\" />\n              <img className=\"logos2_2\" src={sass} alt=\"Sass\" />\n              <br/><br/><br/>\n              {/* coming soon:\n              -mocha\n              -graphql\n              */}\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Home;\n","import React, {useState} from \"react\";\nimport {\n  Navbar,\n  Nav,\n} from \"react-bootstrap\";\nimport { Link } from 'react-router-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction NavBar () {\n  \n\n\n  //the following variable, and some other additions to code below, is necessaryto fix a bug, in which on the dropdown nav menu, it will not close once an item has been selected. see https://stackoverflow.com/a/58530447 for more info. \n  const [expanded, setExpanded] = useState(false);\n\n  \n  \n\n  \n    return (\n      <Navbar expanded={expanded} fixed=\"top\" className=\"portfolioNavbar\" expand=\"md\">\n        <Navbar.Brand onClick={() => setExpanded(false)} as={Link} className=\"navbarText\" to=\"/\">\n          Stephen Doyle\n        </Navbar.Brand>\n        <Navbar.Toggle onClick={() => setExpanded(expanded ? false : \"expanded\")} aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav>\n            \n            <Nav.Link onClick={() => setExpanded(false)} className=\"navbarText\" as={Link} to=\"/about\">About\n            </Nav.Link>\n            <Nav.Link onClick={() => setExpanded(false)} as={Link} className=\"navbarText\" to=\"/projects\">\n              Projects\n            </Nav.Link>\n            <Nav.Link onClick={() => setExpanded(false)} as={Link} className=\"navbarText\" to=\"/blog\">\n              Blog\n            </Nav.Link>\n            <Nav.Link onClick={() => setExpanded(false)} as={Link} className=\"navbarText\" to=\"/humour\">\n              Humour\n            </Nav.Link>\n            <Nav.Link onClick={() => setExpanded(false)} as={Link} className=\"navbarText\" to=\"/resources\">\n              Resources\n            </Nav.Link>\n            <Nav.Link onClick={() => setExpanded(false)} as={Link} className=\"navbarText\" to=\"/contact\">\n              Contact\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  \n}\n\nexport default NavBar;\n\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nclass About extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col md={{ span: 8, offset: 2 }}>\n            <div className=\"bodyContent\" id=\"about\">\n              <h2 className=\"subheading\">About</h2>\n              <br />\n              <br />\n              <h3>In brief:</h3>\n              Here are all the technologies that I have hands-on practical experience with:\n              <br/>\n              <br/>\n              <ul>\n              <li>{'\\u2022'} JavaScript</li>\n              <li>{'\\u2022'} MERN Stack</li>\n              <li>{'\\u2022'} React</li>\n              <li>{'\\u2022'} Nodejs</li>\n              <li>{'\\u2022'} MongoDB</li>\n              <li>{'\\u2022'} Express</li>\n              <li>{'\\u2022'} NPM</li>\n              <li>{'\\u2022'} TypeScript</li>\n              <li>{'\\u2022'} HTML</li>\n              <li>{'\\u2022'} CSS</li>\n              <li>{'\\u2022'} Amazon Web Services (AWS)</li>\n              <li>{'\\u2022'} SASS</li>\n              <li>{'\\u2022'} Bootstrap</li>\n              <li>{'\\u2022'} Testing with Mocha</li>\n              <li>{'\\u2022'} RESTful APIs</li>\n              <li>{'\\u2022'} GraphQL</li>\n              <li>{'\\u2022'} Git</li>\n              <li>{'\\u2022'} GitHub</li>\n              <li>{'\\u2022'} Babel</li>\n              <li>{'\\u2022'} Webpack</li>\n              <li>{'\\u2022'} ESLINT</li>\n              \n              </ul>\n              <br/>\n              <h5>Certifications</h5>\n              {'\\u2022'} AWS Cloud Pactitioner - awarded May 2021\n              <br/>\n              <br/>\n              <br/>\n              <h3>In detail:</h3>\n              <br/>\n              <p className=\"quote\">'Problems are opportunities in disguise'</p>\n              <br />\n              <p>\n                I think we can all agree 2020 was a terrible year! With\n                quarantines, lockdowns, self-isolations, and all that kind of\n                fun stuff, most of us had a lot of free time on our hands. I\n                decided to make lemonade with 2020's lemons, and use the extra\n                free time to finally really get into the weeds of a hobby that\n                had always captivated me: programming.\n                <br />\n                <br />\n                <h5>HTML, CSS and JS</h5>\n                Although my previous work experience has been in recruitment,\n                and in teaching English as a foreign language, I knew there were\n                a lot of successful self-taught programmers out there. Like a\n                lot of people, I was already familiar with{\" \"}\n                <span className=\"bold\">HTML</span> and{\" \"}\n                <span className=\"bold\">CSS</span>, but in 2020 I started to\n                teach myself JavaScript for the first time, and quickly came to\n                appreciate the flexibility and power of the language.\n                <br />\n                <br />\n                Once I had spent time learning{\" \"}\n                <span className=\"bold\">JavaScript</span> theory, such as{\" \"}\n                <span className=\"bold\">regular expressions</span>,{\" \"}\n                <span className=\"bold\">methods</span>,{\" \"}\n                <span className=\"bold\">algorithms</span>,{\" \"}\n                <span className=\"bold\">data-structures</span>, and{\" \"}\n                <span className=\"bold\">ES6</span>, I started to put this theory\n                into practice by adding JavaScript to HTML/CSS front-end\n                projects as a way to produce single-page web applications that\n                were responsive to user inputs. Of course, as is the tried and\n                tested and clichéd path, I built a{\" \"}\n                <a\n                  href=\"https://stephendoyle10.github.io/The-Queerculator/\"\n                  className=\"articleLink\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  calculator\n                </a>{\" \"}\n                first! Next came an interactive javaScript string method{\" \"}\n                <a\n                  href=\"https://stephendoyle10.github.io/JS-String-Methods/\"\n                  className=\"articleLink\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  cheat sheet\n                </a>\n                , and then a{\" \"}\n                <a\n                  href=\"https://stephendoyle10.github.io/UK-Salary-Calculator/\"\n                  className=\"articleLink\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  UK Salary Calculator\n                </a>\n                .\n                <br />\n                <br />\n                <h5>Node.js, Express.js and MongoDB</h5>\n                The next challenge was to turn my hand to{\" \"}\n                <span className=\"bold\">full-stack development</span>, and, in\n                particular, to use technologies such as{\" \"}\n                <span className=\"bold\">Node.js</span>,{\" \"}\n                <span className=\"bold\">Express</span> and{\" \"}\n                <span className=\"bold\">MongoDB</span>. I decided to combine my\n                twin loves of programming and board gaming to build my first\n                full-stack project using these technologies. This was a web app\n                called{\" \"}\n                <a\n                  href=\"https://boarpp.herokuapp.com\"\n                  className=\"articleLink\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Boarpp\n                </a>\n                : a social media project for baordgamers to share\n                boardgame-related texts, pictures and links, and discuss them\n                with other users.\n                <br /> <br />\n                <h5>React</h5>\n                Happy with my progress in Node, next I wanted to start building{\" \"}\n                <span className=\"bold\">React</span> projects. My first practical project was to refactor my\n                portfolio website from being a traditional HTML, CSS and JS\n                project into being a React project. I successfully achieved\n                this, and the website you are currently viewing is built with\n                the magic of React! \n                <br/>\n                <br/>\n                <h5>MERN stack</h5>\n                So, by now I had used React in a project, and used MongoDB, Express and Node.js in another project, but the next challenge was to build a project that contained all these technologies together - this would be an example of the popular <span className=\"bold\">MERN stack</span>. Integrating all these technologies together can get very complex, so to start with, as an exercise, I set out to build as minimal a MERN stack project as possible, but one which still had full CRUD capabilities (ie the capability for users to create, read, update and delete content), with the idea that such a minimal project could be used as a foundation/ template for more ambitious projects. This <a\n                  href=\"https://ui-stevs-guestbook.herokuapp.com\"\n                  className=\"articleLink\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Guestbook\n                </a> was the result.\n                <br /> <br />\n                <h5>AWS/ Cloud Computing</h5>\n                After completing my first MERN stack projects I decided on a change of pace. Cloud computing is obviously huge in development, and growing ever more ubiquitous. Key cloud computing concepts are of course relevant across all cloud computing companies, whether it be AWS, Microsoft Azure, Google Cloud, or another company. But as AWS is clearly the market leader in this field, I decided to focus my attention on them. I had already used AWS (in particular, S3) in one of my projects (Boarpp) to store user-uploaded images. On learning that there was an official AWS certification that covered all the fundamental concepts of AWS, I decided this would be a great qualification to train for. After a period of intense study, I am happy to report I passed the exam, and I am now a qualified AWS Cloud Practitioner!\n              </p>\n              <br/><br/><br/><br/><br/>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default About;\n\n","import React, { useState } from \"react\";\nimport \"../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction Boarpp() {\n  const [readMore, setReadMore] = useState(false);\n  const extraContent = (\n    <div>\n      <p className=\"extra-content\">\n        This application demonstrates use and proficiency in the following\n        languages, tools, frameworks, runtime environments, database programmes,\n        skills etc:\n        <br />\n        <br />\n        HTML\n        <br />\n        CSS\n        <br />\n        JavaScript\n        <br />\n        Modals\n        <br />\n        Bootstrap\n        <br />\n        Node.js\n        <br />\n        NPM\n        <br />\n        Express\n        <br />\n        Template Engine (Embedded JavaScript/EJS)\n        <br />\n        MongoDB\n        <br />\n        Mongoose\n        <br />\n        User registration/ password encryption (using bcrypt)\n        <br />\n        MVC architecture\n        <br />\n        Summernote WYSIWYG text editor for formatting posts\n        <br />\n        <br />\n        The application includes the following features:\n        <br />\n        - ability to register an account, and sign in and out\n        <br />\n        - a feed page which lists all previous posts (sorted by most recent)\n        <br />\n        - ability to create a new blog post, with option to upload a picture,\n        which then gets added to the feed\n        <br />\n        - a search function in which a user can search previous posts for a\n        keyword\n      </p>\n    </div>\n  );\n  const linkName = readMore ? \"[read less]\" : \"[read more]\";\n  return (\n    <div className=\"project\">\n      <h3 className=\"subheading\">Boarpp</h3>\n      <br />\n      <div className=\"projectButtons\">\n        <button\n          className=\"projectButton\"\n          onClick={() => window.open(\"https://boarpp.herokuapp.com\")}\n        >\n          Visit Boarpp\n        </button>\n        <button\n          className=\"projectButton\"\n          onClick={() =>\n            window.open(\"https://github.com/StephenDoyle10/boarpp\")\n          }\n        >\n          View Code\n        </button>\n      </div>\n      <br />\n      <br />\n      <div className=\"projectText\">\n        <p>\n          'Boarpp' is a full-stack web app built with Node.js, Express and\n          MongoDB. It is a blogging service for the board game community, in\n          which users can create posts about board games they have played.</p>\n          <div\n            className=\"articleLink\"\n            onClick={() => {\n              setReadMore(!readMore);\n            }}\n          >\n            <p>{linkName}</p>\n          </div>\n          {readMore && extraContent}\n        \n      </div>\n    </div>\n  );\n}\n\nexport default Boarpp;\n\n","import React from \"react\";\nimport \"../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass Calculator extends React.Component {\n \n  render() {\n    return (\n      \n        <div className=\"project\">\n          <h3 className=\"subheading\">Calculator</h3>\n          <br />\n          <div className=\"projectButtons\">\n            <button\n              className=\"projectButton\"\n              onClick={() =>\n                window.open(\n                  \"https://stephendoyle10.github.io/The-Queerculator/\"\n                )\n              }\n            >\n              Visit Calculator\n            </button>\n            <button\n              className=\"projectButton\"\n              onClick={() =>\n                window.open(\n                  \"https://github.com/StephenDoyle10/The-Queerculator/\"\n                )\n              }\n            >\n              View Code\n            </button>\n          </div>\n          <br />\n          <br />\n          <p>\n          This calculator is my first ever coding project, and I used it\n          as a opportunity to put into pratice some CSS ideas picked up\n          in the Codecademy CSS course, and to try out integrating\n          JavaScript with HTML.</p>\n          <br />\n        </div>\n              \n    );\n  }\n}\n\nexport default Calculator;","import React, {useState} from \"react\";\nimport \"../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction SalaryCalc() {\n  const [readMore, setReadMore] = useState(false);\n  const extraContent = (\n    <div>\n      <p className=\"extra-content\">\n      1. the user's annual pay after all tax deductions, 2. the\n            user's monthly pay after all tax deductions, 3. how much the\n            user will pay in income tax in the year, 4. how much the\n            user will pay in national insurance contributions in the\n            year.\n            <br />\n            <br />\n            I felt that UK tax rules were sufficiently complex enough\n            that this would be a good demonstration of my algorithm\n            writing ability.\n            <br />\n            <br />\n            The algorithm had to account for both income tax and\n            national insurance contributions.\n            <br />\n            <br />\n            Regarding income tax, the algorithm had to account for the\n            following: 1. employees pay 0% on earnings up to £12,500, 2.\n            employees then pay 20% on anything they earn between £12,501\n            and £50,000, 3. they pay 40% Income Tax on earnings between\n            £50,001 to £150,000, 4. they pay 45% on earnings over\n            £150,001\n            <br />\n            <br />\n            Regarding National Insurance contributions, the algorithm\n            had to account for the following: 1. employees only start to\n            pay National Insurance contributions if they earn more than\n            £183 a week, 2. they pay 12% of their earnings above this\n            limit and up to £962 a week, 3. the rate drops to 2% of\n            their earnings over £962 a week.\n            <br />\n      </p>\n    </div>\n  );\n  const linkName = readMore ? \"[read less]\" : \"[read more]\";\n  return (\n    <div className=\"project\">\n        <h3 className=\"subheading\">UK Salary Calculator</h3>\n        <br />\n        <div className=\"projectButtons\">\n          <button\n            className=\"projectButton\"\n            onClick={() =>\n              window.open(\n                \"https://stephendoyle10.github.io/UK-Salary-Calculator/\"\n              )\n            }\n          >\n            Visit UK Salary Calculator\n          </button>\n          <button\n            className=\"projectButton\"\n            onClick={() =>\n              window.open(\n                \"https://github.com/StephenDoyle10/UK-Salary-Calculator/\"\n              )\n            }\n          >\n            View Code\n          </button>\n        </div>\n        <br />\n        <br />\n        <p>\n          This project uses an algorithm that takes a user's annual\n          gross salary as an input, and outputs:</p>\n          <div\n            className=\"articleLink\"\n            onClick={() => {\n              setReadMore(!readMore);\n            }}\n          >\n            <p>{linkName}</p>\n          </div>\n          {readMore && extraContent}\n        \n      \n    </div>\n  );\n}\n\nexport default SalaryCalc;\n\n\n\n\n\n/*\n\n\nclass SalaryCalc extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      \n        <div className=\"project\">\n        <h3 className=\"subheading\">UK Salary Calculator</h3>\n        <br />\n        <div className=\"projectButtons\">\n          <button\n            className=\"projectButton\"\n            onClick={() =>\n              window.open(\n                \"https://stephendoyle10.github.io/uksalarycalculator/\"\n              )\n            }\n          >\n            Visit UK Salary Calculator\n          </button>\n          <button\n            className=\"projectButton\"\n            onClick={() =>\n              window.open(\n                \"https://github.com/StephenDoyle10/uksalarycalculator\"\n              )\n            }\n          >\n            View Code\n          </button>\n        </div>\n        <br />\n        <br />\n        <p>\n          This project uses an algorithm that takes a user's annual\n          gross salary as an input, and outputs:{\" \"}\n          <span id=\"dotsTwo\">...</span>\n          <span id=\"moreTwo\">\n            1. the user's annual pay after all tax deductions, 2. the\n            user's monthly pay after all tax deductions, 3. how much the\n            user will pay in income tax in the year, 4. how much the\n            user will pay in national insurance contributions in the\n            year.\n            <br />\n            <br />\n            I felt that UK tax rules were sufficiently complex enough\n            that this would be a good demonstration of my algorithm\n            writing ability.\n            <br />\n            <br />\n            The algorithm had to account for both income tax and\n            national insurance contributions.\n            <br />\n            <br />\n            Regarding income tax, the algorithm had to account for the\n            following: 1. employees pay 0% on earnings up to £12,500, 2.\n            employees then pay 20% on anything they earn between £12,501\n            and £50,000, 3. they pay 40% Income Tax on earnings between\n            £50,001 to £150,000, 4. they pay 45% on earnings over\n            £150,001\n            <br />\n            <br />\n            Regarding National Insurance contributions, the algorithm\n            had to account for the following: 1. employees only start to\n            pay National Insurance contributions if they earn more than\n            £183 a week, 2. they pay 12% of their earnings above this\n            limit and up to £962 a week, 3. the rate drops to 2% of\n            their earnings over £962 a week.\n            <br />\n          </span>\n        </p>\n        <a\n          className=\"articleLink\"\n          onclick=\"readMoreFunctionTwo()\"\n          id=\"readMoreButtonTwo\"\n        >\n          Read more\n        </a>\n      </div>\n              \n    );\n  }\n}\n\nexport default SalaryCalc;\n*/","import React from \"react\";\nimport \"../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass CheatSheet extends React.Component {\n  \n\n  render() {\n    return (\n      \n        <div className=\"project\">\n        <h3 className=\"subheading\">\n          JavaScript String Method Cheat Sheet\n        </h3>\n        <br />\n        <div className=\"projectButtons\">\n          <button\n            className=\"projectButton\"\n            onClick={() =>\n              window.open(\n                \"https://stephendoyle10.github.io/JS-String-Methods/\"\n              )\n            }\n          >\n            Visit Cheat Sheet\n          </button>\n          <button\n            className=\"projectButton\"\n            onClick={() =>\n              window.open(\n                \"https://github.com/StephenDoyle10/JS-String-Methods/\"\n              )\n            }\n          >\n            View Code\n          </button>\n        </div>\n        <br />\n        <br />\n        <p>\n          This is my first attempt at writing a HTML webpage that has\n          javaScript functions. I had just completed the javaScript\n          course on freecodecamp, which covered a lot of ground, but did\n          not have much on how to integrate JS with HTML, so I had to\n          research that myself.\n          <br />\n          <br />\n          This programme uses HTML input form fields that takes a users\n          input and stores it as a JS variable. Then an onclick event\n          does something with this variable, and returns a new value on\n          the webpage.\n          <br />\n        </p>\n        <br />\n      </div>\n              \n    );\n  }\n}\n\nexport default CheatSheet;","import React from \"react\";\nimport \"../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass PortfolioWebsite extends React.Component {\n  \n\n  render() {\n    return (\n      \n        <div className=\"project\">\n        <h3 className=\"subheading\">Personal Portfolio Website</h3>\n        <br />\n        <div className=\"projectButtons\">\n          <button\n            className=\"projectButton\"\n            onClick={() =>\n              window.open(\n                \"https://github.com/StephenDoyle10/stephendoyle10.github.io/tree/master\"\n              )\n            }\n          >\n            View Code\n          </button>\n        </div>\n        <br />\n        <br />\n        <p>\n          This is the website you are viewing right now! A static website, I originally created this in the traditional way - with HTML and CSS (with a little help from Bootstrap and Sass). However, after learning React, one of my very first React projects was to refactor this website and build it in React. So the website as you see it now is built in React. This was a great exercise to start thinking of websites in the React way, which is a major paradigm shift from from how we traditionally view building websites. Also, this website gave me important practice in using packages such as react-router and react-bootstrap.\n          <br />\n        </p>\n        <br />\n      </div>\n              \n    );\n  }\n}\n\nexport default PortfolioWebsite;","import React from \"react\";\nimport \"../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass MernBasic extends React.Component{\n \n    render() {\n      return (\n        \n          <div className=\"project\">\n          <h3 className=\"subheading\">Guestbook</h3>\n          <br />\n          <div className=\"projectButtons\">\n            <button\n              className=\"projectButton\"\n              onClick={() =>\n                window.open(\n                  \"https://ui-stevs-guestbook.herokuapp.com\"\n                )\n              }\n            >\n              Visit Guestbook\n            </button>\n            <button\n              className=\"projectButton\"\n              onClick={() =>\n                window.open(\n                  \"https://github.com/StephenDoyle10/Guestbook\"\n                )\n              }\n            >\n              View Code\n            </button>\n          </div>\n          <br />\n          <br />\n          <p>\n            For my first MERN (MongoDB, Express, React and Node.js) stack project, I wanted to keep things simple and create as minimal a project as possible, but one that still includes full CRUD capabilities: the ability for a user to create, read, update and delete data. If a user visits the project's website, they can add a greeting message (or a joke, or a favourite quote, or anything they wish), and they can also view, delete and edit messages.\n            <br />\n            <br/>\n            This project is deliberately very bare bones and does not even contain CSS (much less bootstrap). The idea is that it contains essential code only and can serve as a template for more ambitious projects in future. Deployed on Heroku, and it uses the GraphQL approach to web APIs, rather than REST.\n            \n          </p>\n        </div>\n                \n      );\n    }\n  }\nexport default MernBasic;","import React from \"react\";\nimport \"../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass Lyrics extends React.Component{\n \n    render() {\n      return (\n        \n          <div className=\"project\">\n          <h3 className=\"subheading\">Lyrics to Live By</h3>\n          <br />\n          <div className=\"projectButtons\">\n            <button\n              className=\"projectButton\"\n              onClick={() =>\n                window.open(\n                  \"http://ui.lyricstoliveby.tk\"\n                )\n              }\n            >\n              Visit Lyrics to Live By\n            </button>\n            <button\n              className=\"projectButton\"\n              onClick={() =>\n                window.open(\n                  \"https://github.com/StephenDoyle10/lyrics\"\n                )\n              }\n            >\n              View Code\n            </button>\n          </div>\n          <br />\n          <br />\n          <p>\n          This project builds off the MERN stack <i>Guestbook</i> web app (see below) I previously built. The big advancement here compared to the <i>Guestbook</i>, is that <i>Lyrics to Live By</i> has user authentication and authorization, which of course is vital for any full stack web app that wishes to include user content. In this app, users sign in with their gmail account; thus this app uses Google APIs. For authorization, it uses JSON web tokens.\n          <br/>\n          <br/>\n          So what can users on the app actually do? Well, we all know how much certain people love posting pictures of their food online. <i>Lyrics to Live By</i> is the music equivalent to that: I believe music lovers will love posting and sharing lyric snippets online, the same way food lovers love posting pictures of food. What are you waiting for? Visit the site, and add your favourite lyrics for the world to see!\n          </p>\n        </div>\n                \n      );\n    }\n  }\nexport default Lyrics;","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport Boarpp from \"./ProjectComponents/Boarpp\";\nimport Calculator from \"./ProjectComponents/Calculator\";\nimport SalaryCalc from \"./ProjectComponents/SalaryCalc\";\nimport CheatSheet from \"./ProjectComponents/CheatSheet\";\nimport PortfolioWebsite from \"./ProjectComponents/PortfolioWebsite\";\nimport MernBasic from \"./ProjectComponents/MERN_basic\";\nimport Lyrics from \"./ProjectComponents/Lyrics\";\n\nclass Projects extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col md={{ span: 8, offset: 2 }}>\n            <div className=\"bodyContent\" id=\"projects\">\n              <h2 className=\"subheading\">Projects</h2>\n              <br />\n              <p>Here is a list of all the web apps I have built so far, starting with the most recent (and thus the most advanced), and finishing with my early forays into basic front-end html/css/js implementations. All of them can be visited online.</p>\n              <h3 className=\"subheading\">Full-stack:</h3>\n              <Lyrics/>\n              <MernBasic />\n              <Boarpp />\n              <br />\n              <h3 className=\"subheading\">Front-end:</h3>\n              <PortfolioWebsite />\n              <CheatSheet />\n              <SalaryCalc />\n              <Calculator />\n              \n            </div>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Projects;","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport {Link } from 'react-router-dom';\n\n\nclass Blog extends React.Component {\n  \n\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col md={{ span: 8, offset: 2 }}>\n            <div className=\"bodyContent\">\n                <h2 className=\"subheading\">Blog</h2>\n                <br/>\n\n\n\n                <Link as={Link} to=\"/gitcommands\">\n                    <div className=\"project\" >\n                <h5 >\n                <div className=\"plainP\">Popular Git Commands</div> - <span className=\"publishedDate\">06 April 2021</span></h5>\n                <br/>\n                <p className=\"articleTeaserText\">This article goes through some of the most popular and important Git commands, such as cloning repos, creating separate branches, connecting local code to a remote repo, initialising git, commiting and pushing...<br/><br/>[read more]</p>\n                </div>\n                </Link>\n\n\n                <Link as={Link} to=\"/merntoheroku\">\n                    <div className=\"project\" >\n                <h5 >\n                <div className=\"plainP\">Deploying a MERN stack project to Heroku</div> - <span className=\"publishedDate\">01 April 2021</span></h5>\n                <br/>\n                <p className=\"articleTeaserText\">GitHub Pages is a fairly straighforward, and free, way to deploy front end projects, and get them online. I am definitely a fan, and have used GitHub pages to deploy all my front end projects, including my salary calculator, and also my personal portfolio webiste (which is the website you are looking at right now!). However, when it comes to full stack projects (in other words, a project in which users can signin and create their own content on the site) we need to...<br/><br/>[read more]</p>\n                </div>\n                </Link>\n\n\n                <Link as={Link} to=\"/graphql\">\n                    <div className=\"project\" >\n                <h5 >\n                <div className=\"plainP\">Introducing GraphQL</div> - <span className=\"publishedDate\">22 March 2021</span></h5>\n                <br/>\n                <p className=\"articleTeaserText\">GraphQL is an alternative to RESTful APIs that has been growing in popularity in recent years. So why has GraphQL been getting so popular? This largely has to do with the gains in efficiency that GraphQL grants your project. The problem with REST API calls is that they often result in overfetching and underfetching...<br/><br/>[read more]</p>\n                </div>\n                </Link>\n\n{/*\n                <Link as={Link} to=\"/mernsetup2\">\n                    <div className=\"articleTeaser\" >\n                <h5 >\n                <div className=\"plainP\">Setting up a basic MERN stack project: Part 2</div> - <span className=\"publishedDate\">11 March 2021</span></h5>\n                <br/>\n                <p className=\"articleTeaserText\">Welcome to Part 2 in our step-by-step guide to setting up a basic bare-bones MERN stack project with full CRUD capabilities. If you had follwed along with part 1, your code should look like this currently. Now lets add React to our project (and if at any point you get stuck you can view how the code is supposed to look by the end of this post here)..[read more]</p>\n                </div>\n                </Link>\n\n\n                <Link as={Link} to=\"/mernsetup1\">\n                    <div className=\"articleTeaser\" >\n                <h5 >\n                <div className=\"plainP\">Setting up a basic MERN stack project: Part 1</div> - <span className=\"publishedDate\">10 March 2021</span></h5>\n                <br/>\n                <p className=\"articleTeaserText\">The MERN stack is one of the best stacks in which to build large scale web projects. However, the initial set-up, even to build a simple bare-bones project, can be intimidatingly complex for people who are new to programming. This is part 1 of a series of blogposts that guides you to creating a simple bare-bones MERN stack project with full CRUD capabilities. These posts are not for someone completely new to the MERN stack, but rather they are better suited to someone who is familiar with the technologies and wants a succinct reminder on how to set up a project...[read more]</p>\n                </div>\n                </Link>\n*/}\n\n\n                <Link as={Link} to=\"/ComponentTypes\">\n                    <div className=\"project\" >\n                <h5 >\n                <div className=\"plainP\">React Component Types</div> - <span className=\"publishedDate\">10 Feb 2021</span></h5>\n                <br/>\n                <p className=\"articleTeaserText\">The topic of React components touches on a lot of different concepts, such as stateful and stateless components, function components, and class components. Meanwhile, the arrival of Hooks in 2018 changed everything. What do all these things mean, and how do they fit into each other. It can be a bit tricky to understand all these concepts and grasp how they all fit into one another. This article aims to help with that!...<br/><br/>[read more]</p>\n                </div>\n                </Link>\n                <Link as={Link} to=\"/enginesandruntime\">\n                    <div className=\"project\" >\n                <h5 >\n                <div className=\"plainP\">Engines and Runtime Environments</div> - <span className=\"publishedDate\">05 Feb 2021</span></h5>\n                <br/>\n                <p className=\"articleTeaserText\">Node.JS is a runtime environment. Most people accept that without really realising what a runtime environment actually is. This article looks at what runtime environments and engines are, why they are necessary for JavaScript, and why Node is a gamechanger in this regard...<br/><br/>[read more]</p>\n                </div>\n                </Link>\n                <Link as={Link} to=\"/deployingreact\">\n                    <div className=\"project\" >\n                <h5 >\n                <div className=\"plainP\">Deploying React on GitHub Pages</div> - <span className=\"publishedDate\">27 Jan 2021</span></h5>\n                <br/>\n                <p className=\"articleTeaserText\">Luckily there is a fairly straightforward way to deploy a front-end React project online for free, for the world to see! This is done using GitHub, and more specifically, their GitHub pages feature. There are a number of steps involved in this, which this article goes through....<br/><br/>[read more]</p>\n                </div>\n                </Link>\n                \n                <Link as={Link} to=\"/asyncjsarticle\">\n                    <div className=\"project\" >\n                <h5 >\n                <div className=\"plainP\">Asynchronus Javascript</div> - <span className=\"publishedDate\">20 Jan 2021</span></h5>\n                <br/>\n                <p className=\"articleTeaserText\">Aysynchronous JavaScript touches on a lot of different concepts, such as callback functions, higher order functions, ‘callback hell’, single- vs multi-threaded code, I/O blocking/non-blocking, the Javascript runtime, the event loop, the call stack, task queue, promises, async/await, web apis, and node apis. It can seem overwhelming, however the aim of the following article is to explain all these concepts and show how they all fit together...<br/><br/>[read more]</p>\n                </div>\n                </Link>\n                \n                \n              \n            </div>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Blog;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nclass Resources extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col md={{ span: 8, offset: 2 }}>\n            <div className=\"bodyContent\" id=\"resources\">\n              <h2 className=\"subheading\">Resources</h2>\n              <br />\n              <br />\n              <p>\n                Below is a list of some of the resources that helped me in my\n                coding journey, and they all get the Stephen Doyle seal of\n                approval!\n              </p>\n              \n              <div className=\"project\">\n              <h3 className=\"subheading\">Online/ websites:</h3>\n              <br />\n              <p className=\"mediaName\">freeCodeCamp</p>\n              <a\n                className=\"articleLink\"\n                href=\"https://www.freecodecamp.org\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                https://www.freecodecamp.org\n              </a>\n              <p>\n                freeCodeCamp is an amazing free online course that I used early\n                on in my coding journey. By the time I discovered freeCodeCamp I\n                was already familiar with HTML and CSS, so I skipped the first\n                module, and went straight to 'JavaScript Algorithms and Data\n                Structures'. This was a revelation, I still return to certain\n                sections as a refresher and to test myself. The following\n                freeCodeCamp modules are not as detailed as its JavaScript one,\n                but are still useful introductions to topics such as Bootstrap,\n                Sass, D3, React and Node.\n              </p>\n              <br />\n              <p className=\"mediaName\">Codecademy</p>\n              <a\n                className=\"articleLink\"\n                href=\"https://www.codecademy.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                https://www.codecademy.com\n              </a>\n              <p>\n                Codecademy has a huge catalogue of topics and courses, although\n                most of the content is for paid subscribers only. I have only\n                used it for HTML and CSS so far, but can say it was very good\n                for that.\n              </p>\n              <br />\n              <p className=\"mediaName\">Reddit</p>\n              <a\n                className=\"articleLink\"\n                href=\"https://www.reddit.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                https://www.reddit.com\n              </a>\n              <p>\n                Reddit is a goldmine for programming content, whether it be\n                discussions, advice, news, resources or something else, its all\n                here. There are dozens of programming-related subreddits worth\n                subscribing too, from general ones such as r/learnprogramming,\n                r/webdev and r/compsci, to niche subreddits centred on a\n                specific language or technology, such as r/javascript, r/node or\n                r/reactjs. However, the one indispensible subreddit everyone\n                should subscribe to is r/programminghumor!\n              </p>\n              <br />\n              <p className=\"mediaName\">Stack Overflow</p>\n              <a\n                className=\"articleLink\"\n                href=\"https://stackoverflow.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                https://stackoverflow.com\n              </a>\n              <p>\n                The most popular programming and computer science help forum out\n                there. If a programmer gets stuck on anything they can ask for\n                help here, and will no doubt have a solution within hours.\n                Although the chances are the question has already been asked and\n                answered, so does not even require a new post.\n              </p>\n              <br />\n              <p className=\"mediaName\">Leetcode</p>\n              <a\n                className=\"articleLink\"\n                href=\"https://leetcode.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                https://leetcode.com\n              </a>\n              <p>\n                'Competitive programming' has really taken off in recent years,\n                and there are many websites (with Leetcode being one of the\n                best) that offer coding challenges that programmers use either\n                for fun, or in order to sharpen their algorithm capabilities,\n                often with a view to acing future programming interviews.\n              </p>\n              <br />\n              <p className=\"mediaName\">W3</p>\n              <a\n                className=\"articleLink\"\n                href=\"https://www.w3schools.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                https://www.w3schools.com\n              </a>\n              <p>\n                Very well-designed, straightforward and comprehensive website\n                that has a page on practically every different aspect of HTML,\n                CSS and JavaScript, as well as an increasing number of other\n                languages and technologies. Each feature of HTML, CSS or\n                JavaScript that is explained has sample code to demonstrate that\n                feature, as well as a virtual browser window to show how that\n                code looks and words in use.\n              </p>\n              </div>\n              <br/>\n              <div className=\"project\">\n              <h3 className=\"subheading\">Podcasts:</h3>\n              <br />\n              <p className=\"mediaName\">CodeNewbie</p>\n              <p>\n                Very accessible and wholesome podcast designed for new\n                programmers (the clue is in the title!). Each episode deals with\n                a single topic and is centred around an interview of a special\n                guest.\n              </p>\n              <p className=\"mediaName\">DevNews</p>\n              <p>\n                Very similar in tone to CodeNewbie (ie wholesome and\n                accessible), and shares the same host. However, DevNews is more\n                centered on current tech news.\n              </p>\n              <p className=\"mediaName\">JavaScript Jabber</p>\n              <p>\n                A little less newbie-centric than CodeNewbie and DevNews,\n                although still quite accessible, this features roundtable\n                discussions with experts on hot issues, and interviews with\n                special guests.\n              </p>\n              </div>\n              <br />\n              <div className=\"project\">\n              <h3 className=\"subheading\">Books:</h3>\n              <h4 className=\"subheading\">\n                JavaScript Algorithms and Data Structures:\n              </h4>\n              <p className=\"mediaName\">\n                <span className=\"bookTitle\">\n                  JavaScript Data Structures and Algorithms\n                </span>{\" \"}\n                by Sammy Bae\n              </p>\n              <p className=\"mediaName\">\n                <span className=\"bookTitle\">\n                  Learning JavaScript Data Structures and Algorithms\n                </span>{\" \"}\n                by Loiane Groner\n              </p>\n              <p className=\"mediaName\">\n                <span className=\"bookTitle\">\n                  Cracking the Coding Interview: 189 Programming Questions and\n                  Solutions\n                </span>{\" \"}\n                by Gayle Laakmann McDowell\n              </p>\n              <br />\n              <h4 className=\"subheading\">Bootstrap:</h4>\n              <p className=\"mediaName\">\n                <span className=\"bookTitle\">\n                  Bootstrap 4 - Responsive Web Design\n                </span>{\" \"}\n                by Silvio Moreto\n              </p>\n              <br />\n              <h4 className=\"subheading\">React:</h4>\n              <p className=\"mediaName\">\n                <span className=\"bookTitle\">Beginning React with Hooks</span> by\n                Greg Lim\n              </p>\n              <p>\n                This book does for React what Greg Lim's Node book does for\n                Node. Simply, no one writes in a plainer, and more no-nonsense\n                and easy-to-understand style. Like with his Node book, Greg\n                starts with a simple 'hello world' type project and keeps adding\n                to it, making it more and more complex, until without even\n                realising it you have covered loads of topics, and gained a\n                solid grounding in the technology.\n              </p>\n              <br/>\n              <h4 className=\"subheading\">Node.js:</h4>\n              <br/>\n              <p className=\"mediaName\">\n                <span className=\"bookTitle\">\n                  Beginning Node.js, Express and MongoDB Development\n                </span>{\" \"}\n                by Greg Lim\n              </p>\n              <p>\n                This is book is less than 150 pages but somehow still manages to\n                walk you through the creation of full stack node.js project from\n                beginning to deployment on heroku. Very concise, well explained\n                and easy to follow.\n              </p>\n              <br/>\n              <p className=\"mediaName\">\n                <span className=\"bookTitle\">Get Programming with Node.js</span>{\" \"}\n                by Jonathan Wexler\n              </p>\n              <p>\n                Huge (500 pages+), wonderfully designed, and comprehensive book\n                on building a Node.js project, from complete beginning, up to\n                deploying on heroku and testing with mocha and chai.\n              </p>\n              <br />\n              <h4 className=\"subheading\">MERN Stack (ie React and Node.js combined):</h4>\n              <br/>\n              <p className=\"mediaName\">\n                <span className=\"bookTitle\">\n                  Pro MERN Stack Full Stack Web App Development with Mongo,\n                  Express, React and Node\n                </span>{\" \"}\n                by Vasan Subramanian\n              </p>\n              <p>\n                Huge and comprehensive book (500+ pages), this book is my MERN Bible. Covers a lot of ground\n                and goes into loads of technical detail about a wide range of topics related to the MERN stack, but can be tough for beginners.\n              </p>\n              <br/>\n              <p className=\"mediaName\">\n                <span className=\"bookTitle\">\n                  Modern Full-Stack Development Using TypeScript, React,\n                  Node.js, Webpack and Docker\n                </span>{\" \"}\n                by Frank Zammetti\n              </p>\n              <p>\n                A great technical manual on all the technologies it covers, but\n                what makes it stand out is how witty and charming a writer Frank\n                Zammetti is. In between the technical instruction he fills the\n                book with entertaining and illuminating industry-insider\n                anecdotes on the history of web development to explain why and\n                how technologies like React, TypeScript, Webpack and Docker came\n                about.\n              </p>\n              \n              <br />\n\n              <h4 className=\"subheading\">GraphQL:</h4>\n              <br/>\n              <p className=\"mediaName\">\n                <span className=\"bookTitle\">\n                  Learning GraphQL: Declarative Data Fetching for Modern Web\n                  Apps\n                </span>{\" \"}\n                by Eve Porcello and Alex Banks\n              </p>\n              <p>\n                Written with much wit and charm, as well as being very clear and\n                detailed, perfect for beginners.\n              </p>\n              <br />\n              <h4 className=\"subheading\">Biography/ history:</h4>\n              <br/>\n              \n              \n              <p className=\"mediaName\">\n                <span className=\"bookTitle\">Showstopper! The Breakneck Race to Create Windows NT and the Next Generation at Microsoft</span> by G. Pascal Zachary (First published 1994)\n              </p>\n              <p>\n                This is a very specialist book that chronicles the creation of the first Windows NT operating system in the late 1980s and early 1990s. Despite the author's best attempts to make this a riveting tale, I would say this is really only for people with an interest in the very specific subject matter.\n              </p>\n              <br/>\n              <p className=\"mediaName\">\n                <span className=\"bookTitle\">\n                  Code: The Hidden Language of Computer Hardware and Software\n                </span>{\" \"}\n                by Charles Petzold (First published 1999)\n              </p>\n              <p>\n                Author Charles Petzold has an amazing ability to make difficult\n                concepts easy to understand. This book covers the history of\n                computer science and shows how things like braile, morse code,\n                telegraphs and relays helped pave the way for the modern\n                computer.\n              </p>\n              <br/>\n              <p className=\"mediaName\">\n                <span className=\"bookTitle\">The New New Thing: A Silicon Valley Story</span> by Michael Lewis (First published 1999)\n              </p>\n              <p>\n                Michael Lewis is known for his entertaining and idiosyncratic takes on different subjects, that often get adapted into films - for example, Moneyball, the Blind Side, and the Big Short. This is his take on Silicon Valley, and in particular the author gets access to eccentric tech innovator and billionaire James Clark, who is the main focus of this book. After some odd passages in the opening chapters about sailing and flying a helicopter, the book eventually gets very riveting.\n              </p>\n              <br />\n              <p className=\"mediaName\">\n                <span className=\"bookTitle\">Boo Hoo: A Dot Com Story</span> by Ernst Malmsten, Erik Portanger and Charles Drazin (First published 2001)\n              </p>\n              <p>\n                The dot-com bubble lasted from 1995 to 2001. In that time it seemed unlimited funding was available to new internet start-ups, almost all of whom went on to have outrageously successful IPOs, although the party was soon to come a crashing end. One of the most notable casualties of the bursting of the bubble was boo.com, a company which lasted for just 18 months, yet still managed to burn through $135 million of funding. This is an entertaining biography of the company written by one of its three founders, Ernst Malmsten.\n              </p>\n              <br/>\n              <p className=\"mediaName\">\n                <span className=\"bookTitle\">Coders at Work: Reflections on the Craft of Programming</span> by Peter Seibel (First published 2009)\n              </p>\n              <p>\n                This book contains 16 detailed and candid interviews with seminal programmers, including Brendan Eich (who created JavaScript), Douglas Crockford (who created JSON) and Ken Thompson (co-inventor of UNIX).\n              </p>\n              <br/>\n              <p className=\"mediaName\">\n                <span className=\"bookTitle\">The Innovators: How a Group of Hackers, Geniuses, and Geeks Created the Digital Revolution</span> by Walter\n                Isaacson (First published 2014)\n              </p>\n              \n              <p>\n                Extremely entertaining and unputdownable book focusing on all\n                the eccentric genius' that propelled computer science forward,\n                from Charles Babbage and Ada, Countess of Lovelace in the early\n                19th century, to the usual suspects of Bill Gates and Steve Jobs\n                in the late 20th century. Featuring thrilling accounts of all\n                the biggest discoveries and breakthroughs in computer science\n                such as the invention of the transistor, the microchip, video\n                games, the home computer etc. It covers much of the same ground\n                as another book in this list - Code by Charles Petzold - but the\n                Innovators is much more gossipy and less technical.\n              </p>\n              <br/>\n              <p className=\"mediaName\">\n                <span className=\"bookTitle\">How the Internet Happened: From Netscape to the iPhone</span> by Brian McCullough (First published 2018)\n              </p>\n              <p>\n                Take a trip down memory-lane and relive, in entertaining detail, how the internet developed from the 1990s up to the introduction of the iPhone. The book covers how household names like Netscape, Yahoo, Amazon, Google, and Netflix were born and grew to become such behemoths in the tech world. Similar to Walter Isaacson's the Innovators (except this book focuses on web development, whereas the Innovators is more about hardware and software), this book is frequently addictive and unputdownable.\n              </p>\n              </div>\n              \n              <br />\n              \n              <h3 className=\"subheading\">Entertainment:</h3>\n              <div className=\"project\">\n              <h4 className=\"subheading\">TV:</h4>\n              <p className=\"mediaName\">Silicon Valley (2014-2019) </p>\n              <p>Hilarious satire/sitcom following a tech-start up from humble beginnings to fame and fortune. Full of authentic details about programming, the tech world, and office politics, it's clear they used consultants that know that world inside out. </p>\n              <br/>\n              <p className=\"mediaName\">Halt and Catch Fire (2014-2017)</p>\n              <p>Imagine Mad Men was set in the 1980s+, instead of the 1960s+, and imagine that instead of being about advertising companies, it instead focused on tech companies trying to make it rich from the PC and internet booms of the 1980s and 1990s. Well, that's Halt and Catch Fire in a nutshell! Quite apart from the technical details in the show, which are a gift for any programmer watching, this has rich and relatable characters that you really come to care about and enjoy spending time with, not to mention jaw-dropping plot twists. Highly recommended.</p>\n              <br/>\n              <p className=\"mediaName\">Mr Robot (2015-2019)</p>\n              <p>Drama about anti-capitalist hackers, that centres around one particular coding genius. Has been praised, among other things, for its accurate portrayal of hacking methods.</p>\n              <br/>\n              <p className=\"mediaName\">Devs (2020)</p>\n              <p>Disturbing Black-Mirror-esque 6-episode miniseries. As the title suggest, this show is about a group of developers working for a sketchy multi-billion dollar tech company. Engrossing show, but due to the far-fetched plot, I doubt many programmers will find much to relate to, as they would in, say, a show like Silicon Valley.</p>\n              </div>\n              <br/>\n              <div className=\"project\">\n              <h4 className=\"subheading\">Movies:</h4>\n              <p className=\"mediaName\">Jobs (2013)</p>\n              <p>Very entertaining biopic about Steve Jobs, that centres on three key periods in his life, and in particular around some of his historic presentations. I don't know how accurate this is regarding characterisations of Steve Jobs and other key Apple players, but it is very watchable and fast-paced, and touches on a lot of techical details about Apple that will keep programmers particularly enthralled.</p>\n              </div>\n              <br/>\n              <div className=\"project\">\n              <h4 className=\"subheading\">Documentaries:</h4>\n              <p className=\"mediaName\">Code Rush (2000)</p>\n              <p>For those who only started using the internet after 2000, you may not remember or know much about Netscape, which was one of the first internet browsers, and reigned supreme in the 1990s...that is, until Microsoft launched Internet Explorer. In this documentary, filmakers get to follow Netscape staff for year in 1999 (a time when Netscape's star is on the wane). Surprisingly entertaining.</p>\n              </div>\n\n              \n              <br />\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Resources;\n\n","export default __webpack_public_path__ + \"static/media/MachineLearning.4a867937.jpeg\";","export default __webpack_public_path__ + \"static/media/EwWelJGWEAAR56k.e000260d.jpeg\";","export default __webpack_public_path__ + \"static/media/mountain.78aa20c7.png\";","export default __webpack_public_path__ + \"static/media/newJob.8d9616ec.png\";","export default __webpack_public_path__ + \"static/media/stackOFCopyPaste.e0b7200f.jpeg\";","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport meme1 from \"./images/memes/MachineLearning.jpeg\";\nimport meme2 from \"./images/memes/EwWelJGWEAAR56k.jpeg\";\nimport meme3 from \"./images/memes/mountain.png\";\nimport meme4 from \"./images/memes/newJob.png\";\nimport meme5 from \"./images/memes/stackOFCopyPaste.jpeg\";\n\nclass Contact extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col md={{ span: 8, offset: 2 }}>\n            <div className=\"bodyContent\" id=\"contact\">\n              <h2 className=\"subheading\">Humour</h2>\n              <br />\n              <p>Everyone knows the main reason to get into programming is for the memes. Here are some of my favourites. I did not create ANY of them, and unfortuantely due to the nature of memes it is difficult to find who the original creator of each meme is. However, under each meme, I do link to the source where I first found it, although that source may not be the original creator. Anyway, enjoy!</p>\n              \n              \n              <img className=\"memes\" src={meme1} alt=\"Machine Learning meme\" />\n              <div className=\"sourceContainer\">\n                <a\n                  className=\"articleLink\"\n                  href=\"https://twitter.com/mytrashcode/status/1362854479566168067\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  \n                  Source\n                </a>\n              </div>\n              <img className=\"memes\" src={meme2} alt=\"Stack Overflow meme\" />\n              <div className=\"sourceContainer\">\n                <a\n                  className=\"articleLink\"\n                  href=\"https://twitter.com/mytrashcode/status/1370676024787230720\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  \n                  Source\n                </a>\n              </div>\n              <img className=\"memes\" src={meme3} alt=\"JS Frameworks Pandemonium\" />\n              <div className=\"sourceContainer\">\n                <a\n                  className=\"articleLink\"\n                  href=\"https://www.reddit.com/r/ProgrammerHumor/comments/bx0czx/entering_the_programming_via_frontend_way/?utm_source=amp&utm_medium=&utm_content=comments_view_all\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  \n                  Source\n                </a>\n              </div>\n              <img className=\"memes\" src={meme4} alt=\"Time for a new job\" />\n              <div className=\"sourceContainer\">\n                <a\n                  className=\"articleLink\"\n                  href=\"https://old.reddit.com/r/ProgrammerHumor/comments/mnsel7/well_bout_time_for_me_to_be_hittin_the_ol_dusty/\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  \n                  Source\n                </a>\n              </div>\n              <img className=\"memes\" src={meme5} alt=\"Stack Overflow meme\" />\n              <div className=\"sourceContainer\">\n                <a\n                  className=\"articleLink\"\n                  href=\"https://old.reddit.com/r/ProgrammerHumor/comments/n5gc6c/visualizing_the_codes_i_write/\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  \n                  Source\n                </a>\n              </div>\n              <br/>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Contact;","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nclass Contact extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col md={{ span: 8, offset: 2 }}>\n            <div className=\"bodyContent\" id=\"contact\">\n              <h2 className=\"subheading\">Contact</h2>\n              <br />\n              <p>He/him. I can be emailed at:</p>\n              <p>stephen.doyle10@yahoo.co.uk</p>\n              <br />\n              <p>\n                <a\n                  className=\"articleLink\"\n                  href=\"https://github.com/StephenDoyle10\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {\" \"}\n                  Github profile\n                </a>\n              </p>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Contact;","import React from \"react\";\nimport \"../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { Link } from 'react-router-dom';\n\n\nclass DeployingReact extends React.Component {\n  \n\n  render() {\n    const articleName = \"Deploying React on GitHub Pages\";\n    return (\n      \n        <Container>\n        <Row>\n          <Col md={{ span: 8, offset: 2 }}>\n            <div className=\"bodyContent\">\n        <p><Link as={Link} className=\"plainP\" to=\"/blog\">Blogpost</Link > &gt; {articleName}</p>\n        <br/>\n        <h3 className=\"subheading\">{articleName}</h3>\n        <br/>\n        <p className=\"publishedDate\">27 Jan 2021</p>\n        <p>Luckily there is a fairly straightforward way to deploy a front-end React project online for free, for the world to see! This is done using GitHub, and more specifically, their GitHub pages feature. There are a number of steps involved in this, which this article goes through. Also, be advised that for this to work you will need:<br/>\n        1. a GitHub account,<br/>\n        2. Node.js installed (check this by typing 'node --version' in the terminal),<br/>\n        3. git installed (check this by typing 'git --version' in the terminal)<br/>\n\n\n        </p>\n        <br />\n        <h4>Step 1</h4>\n        <p>Navigate terminal to project directory</p>\n        <h4>Step 2</h4>\n        <p>On the GitHub website, on your profile, click on 'new repository'. Give the repository a name, click on 'public', although it is not necessary to give it a description or a readme now. Click on 'create'. The repository will be created and you will be redirected to a new page. Leave that page open and in the background for now, we will needing it later.</p>\n        <h4>Step 3</h4>\n        <p>Make sure the terminal is in the project folder, and then type 'npm install gh-pages --save-dev'. It will take a minute to install this package.</p>\n        <h4>Step 4</h4>\n        <p>In your IDE, open the project's package.json file. At the very beginning of the object, create a new key/value pair, like so: \"homepage\":\"http://&#123;github username&#125;.github.io/&#123;github repository name&#125;\"</p>\n        <h4>Step 5</h4>\n        <p>In the same package.json file you will need to add two key/value pairs at the top of the scripts object, like so: \"predeploy\":\"npm run build\",\n    \"deploy\":\"gh-pages -d build\"</p>\n        \n        \n        <h4>Step 5</h4>\n        <p>Back in terminal (make sure it is in the right folder) type 'git init' and enter.</p>\n        <p><span className=\"italic\">What does this do?</span>&nbsp;The git init command creates or initializes a new Git project, or repository. It creates a .git folder with all the tools and data necessary to maintain versions. This command only needs to be used once per project to complete the initial setup.</p>\n        \n\n        <h4>Step 6</h4>\n        <p>Still in the terminal, back in the browser on the github website, on the page you were redirected to when you created your repository, copy the full line that begins: 'git remote add origin...'. Paste this into the terminal and press enter.</p>\n        <p><span className=\"italic\">What does this do?</span>&nbsp;We have previously initialized the repository (step 5), and we also have a remote repository at GitHub.com. With step 6, we add the remote URL to our local git repository. This stores the remote URL under a more human-friendly name: origin. We will be using 'origin' in a subsequent step.</p>\n\n\n        <h4>Step 7</h4>\n        <p>Then type 'npm run deploy' and enter. (You may be asked for your GitHub username and password in the terminal)</p>\n        <p><span className=\"italic\">What does this do?</span> When you run 'npm run deploy', the scripts properties inside the package.json file are checked in order to decide what to do next. The \"predeploy\" script will run first: \"npm run build\". This builds the app for production to the build folder. It correctly bundles React in production mode and optimizes the build for the best performance. The build is minified. So after 'npm run build' is performed for the first time, you'll notice that your locally-hosted project now has a build folder, which contains that is not very human-friendly, but it optimized for better performance.</p>\n        <p>After the predeploy script (ie \"npm run build\") is performed, the deploy script runs. This is \"gh-pages -d build\"</p>\n        \n        \n        <h4>Step 8</h4>\n        <p>In terminal, run 'git add .' and enter. This adds files from the working directory to the staging area</p>\n        <p>Then run 'git commit -m \"first deployment\" '. This permanently stores file changes from the staging area, and into the local repository.</p>\n        <p>Then run 'git push -u origin master'. This uploads local repository content to a remote repository. In this case, the remote repo is hosted on GitHub, but this could be hosted anywhere.</p>\n\n\n        <h4>Finished!</h4>\n        <p>If you go to your repository page now on GitHub, and go to settings, you should see a green box with info telling you where your project has been published online.</p>\n        <br/>\n\n        <h4>Making changes and updating your project</h4>\n        <p>So the above steps are how to deploy your lovely new react app to the internet using GitHub. But of course, you'll be making changes to your app over time, and improving it. How should you update your changes?</p>\n        <p>On your GitHub repository for your react project there are two branches, the 'gh-pages' branch, and the 'master' branch. The 'master' branch is the same as the code you write on your IDE on your computer, while the 'gh-pages' branch is where this original code has been bundled, using Webpack, for optimal performance in production. Your app is deployed from here.</p>\n        <p>When you make changes to your code in your IDE to the locally stored files, these changes have to be updated to both the master branch and the gh-pages branch on your remote GitHub repository. <span className=\"bold\">To update the 'gh-pages' branch, type 'npm run deploy' in the terminal</span>. The 'gh-pages' branch has now updated, and as the deployed app that you see online comes from here, these updates are also reflected in the app as you see it online.</p>\n        <p>HOWEVER, the master branch on GitHub has not been updated. To do this you must type the following three commands into the terminal:</p>\n        <p>git add .</p>\n        <p>git commit -m \"commit message\"</p>\n        <p>git push -u origin master</p>\n        <p>After following these steps, the updated code as it exists on your computer should be identical to the code on the master branch of your GitHub repo, while on the 'GH-pages' branch there will be a bundled build of these updates, and so your deployed app online will have the necessary updates.</p>\n      \n        \n\n        \n        </div>\n          </Col>\n        </Row>\n      </Container>\n         \n    );\n  }\n}\n\nexport default DeployingReact;","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\n\nclass Notes extends React.Component {\n  \n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col md={{ span: 8, offset: 2 }}>\n            <div className=\"bodyContent\">\n                <h2 className=\"subheading\">Micro-articles</h2>\n                <br/>\n                \n                    <div className=\"articleTeaser\" >\n                <h5 >\n                <div className=\"plainP\">Note 1</div></h5>\n                <br/>\n                <p className=\"articleTeaserText\">Note 1 text</p>\n                </div>\n                \n                \n              \n            </div>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Notes;","import React from \"react\";\nimport \"../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { Link } from 'react-router-dom';\n\n\nclass AsyncJSArticle extends React.Component {\n  \n\n  render() {\n    const articleName = \"Asynchronous Javascript\";\n    return (\n      \n        <Container>\n        <Row>\n          <Col md={{ span: 8, offset: 2 }}>\n            <div className=\"bodyContent\">\n        <p><Link as={Link} className=\"plainP\" to=\"/blog\">Blogpost</Link > &gt; {articleName}</p>\n        <br/>\n        <h3 className=\"subheading\">{articleName}</h3>\n        <br/>\n        <p className=\"publishedDate\">20 Jan 2021</p>\n        <p>Aysynchronous JavaScript touches on a lot of different concepts, such as callback functions, higher order functions, ‘callback hell’, single- vs multi-threaded code, I/O blocking/non-blocking, the Javascript runtime, the event loop, the call stack, task queue, promises, async/await, web apis, and node apis. It can seem overwhelming, however the aim of the following article is to explain all these concepts and show how they all fit together.</p>\n        <br />\n        <h4>What is asynchronous programming and why is it important in web development?</h4>\n        <p>Let’s say you are looking for cheap hotel rooms for your holiday, and you use a website like Trivago that compares prices from hundreds of different sites. You enter in your trip dates and preferred location and when you click submit, Trivago gets to work trawling these hundreds of other websites for the best deals. It will likely take a number of seconds for this request to complete, and to retrieve the requested data.</p>\n        <p>Now, if the website makes a synchronous request, the execution of further code will be blocked until the request is completed and the required data is retrieved, which causes the website to freeze. Not good. But if the website makes an asynchronous request, the browser can continue to execute other code and work as normal, while the request is being completed in the background.  With asynchronous programming, JavaScript can run parts of tasks and continue to other tasks while the previous tasks complete; it does not have to wait for each individual task to complete before moving on to the next one.</p>\n        <br />\n        <h4>Is JavaScript an aynchronous language?</h4>\n        <p>JavaScript is a <span className=\"bold\">single-threaded</span> language, which means no two bits of script can run at the same time (contrast with Java or C#, which are <span className=\"bold\">multi-threaded</span> so can run different pieces of script parallel with each other). This means, by default, and at its core, Javascript is a synchronous language. However, JavaScript can also be made to work asynchronously, which is what makes it so efficient and powerful for both frontend and backend web development, and means a website built with JavaScript doesn’t freeze when, for example, performing an API request.</p>\n        <p>Asynchronous javascript has gone through various stages of development over the years, becoming more and more refined and sophisticated. The earliest way to achieve asynchronous JavaScript was with the use of <span className=\"bold\">callback functions</span>, although, as we will see, this had its problems, and often resulted in code that was difficult to write, read and debug. <span className=\"bold\">Promises</span>, a more elegant way to enable asynchronous JavaScript, was integrated in the ES6/ECMA2015 JavaScript revision. Promises made asynchronous JavaScript code more pleasant to read and write, and in the ES8/ECMA2017 JavaScript revision, more syntactic sugar was added to these promises, with the addition of the ‘<span className=\"bold\">async...await</span>’ syntax.</p>\n        <br />\n        <h4>Callback functions</h4>\n        <p>Sometimes a function will take another function as one of its parameters. In this case, the function that takes the function as a parameter is called a <span className=\"bold\">higher order function</span>, whereas the function that is used as an argument in the higher order function is called a <span className=\"bold\">callback function</span>. Many callback functions are synchronous/ blocking, like Javascript in general. However, often callbacks are used to continue code execution after an asynchronous operation has completed — these are called asynchronous callbacks.</p>\n        <p>The simplest way to do this is with the setTimeout() method. setTimeout() takes a functions as an argument - ie a callback function. Look at the following code:</p>\n        <pre><code>console.log(“hello”);<br />console.log(“goodbye);</code></pre>\n        <br />\n        <p>When this is run, the following will be logged to the console:</p>\n        <pre><code>hello<br />goodbye</code></pre>\n        <p>Both methods are blocking (which means they block the running of subsequent code until they have finished), and run synchronously, from top to bottom.</p>\n        <p>Now look at the following code:</p>\n        <pre><code>setTimeout(()=&gt;{\"{\"}console.log(\"hello\"){\"}\"}, 1000); <br />console.log(“goodbye\");</code></pre>\n        <p>In this code, console.log(“hello\") is now an anonymous callback function inside the setTimeout method, and this method has been told not to execute the callback for 1000 ms (1 second). setTimeout method is non-blocking; when it is called, the operation is taken over by the browser, leaving JavaScript to run any subsequent code. The browser/web API takes care of the countdown timer of 1000ms, and when the timer is up, the callback function joins the call stack (via the task queue and the event loop) to be carried out by the JavaScript interpreter. Ultimately, when this code is run, the following will be logged to the console:</p>\n        <pre><code>goodbye<br />hello</code></pre>\n        <p>Node.JS runs on similar principles, and makes heavy use of callback functions. When the higher order function is first called, the operation is offloaded to the system kernel, until it is complete, then passed back to the call stack (via the task queue and event loop) to be carried out by the JavaScript interpreter.</p>\n        <p>For example:</p>\n        <pre><code>findData(database,(err, result)=&gt;{\"{\"}<br />&nbsp;&nbsp;&nbsp;displayResults(result){\"}\"}) </code></pre>\n        <p>Here, findData() is a method that fetches data from a database. When this is called, the operation is offloaded to the system kernel, which proceeds to retrieve the requested data, while JavaScript is freed up to execute any subsequent code in the process. When the data has been successfully retrieved, the operation is passed back to JavaScript to execute the callback [displayResults(result)], which displays results on the webpage.</p>\n        <p>It is probably helpful to see this explained in Node's own words. This is taken from their own <a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\">documentation</a>:</p>\n        <blockquote>The event loop is what allows Node.js to perform non-blocking I/O operations — despite the fact that JavaScript is single-threaded — by offloading operations to the system kernel whenever possible. Since most modern kernels are multi-threaded, they can handle multiple operations executing in the background. When one of these operations completes, the kernel tells Node.js so that the appropriate callback may be added to the poll queue to eventually be executed.</blockquote>\n        <br />\n        <h4>Promises, and Async/Await</h4>\n        <p>Callbacks work fine for small operations, but when a project becomes more ambitions, it will likely start to have callbacks within callbacks within callbacks, and so on. For example, your project may make a request to a database, and use the returned data to make another request, and use the returned data of that request to make another request, and so on. This results in something that has been nicknamed the ‘pyramid of doom’, or ‘callback hell’, and it results in code that is difficult to write, read, and debug.</p>\n        <p>Promises were implemented in ES6/ECMA 2015 in order to tackle the problem of callback hell. With promises, asynchronous code can be written to look like synchronous code ie neatly aligned vertically, rather than being nested and lurching ever further to the right. The advantage of this is that synchronous code always looks more natural and intuitive to human eyes, and easier to read, write and debug, than asynchronous code.</p>\n        <p>With ES8/ECMA2017, Async/ Await syntax was implemented. This is just syntactic sugar for Promises, meaning it doesn’t introduce any new functionality. The main benefit is that with async/ await, one can write asynchronous code, yet it looks even more like synchronous code and eliminates nesting, making it is easier to read, write and debug (as asynchronous code is often counter-intuitive and difficult to read).</p>\n        <br />\n        <p>Further reading:</p>\n        <p>MDN Web Docs: Concurency model and the event loop:</p>\n        <p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop</a></p>\n        <br />\n        <p>Video of Philip Robert’s famous presentation ‘What the heck is the event loop anyway?’:</p>\n        <p><a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ\">https://www.youtube.com/watch?v=8aGhZQkoFbQ</a></p>\n        </div>\n          </Col>\n        </Row>\n      </Container>\n         \n    );\n  }\n}\n\nexport default AsyncJSArticle;","import React from \"react\";\nimport \"../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { Link } from 'react-router-dom';\n\n\nclass EnginesAndRuntime extends React.Component {\n  \n\n  render() {\n    const articleName = \"Engines and Runtime Environments\";\n    return (\n      \n        <Container>\n        <Row>\n          <Col md={{ span: 8, offset: 2 }}>\n            <div className=\"bodyContent\">\n        <p><Link as={Link} className=\"plainP\" to=\"/blog\">Blogpost</Link > &gt; {articleName}</p>\n        <br/>\n        <h3 className=\"subheading\">{articleName}</h3>\n        <br/>\n        <p className=\"publishedDate\">05 Feb 2021</p>\n        <p>A runtime engine is a program or interpreter that reads code, translates it into machine code, and executes it. It takes human-readable code (ie high level code) such as JavaScript, and converts it to low-level machine code. There are numerous engines for JavaScript. For example, Google Chrome has V8, while Firefox has Spider-Monkey. These engines are a key feature of a runtime environment, which is part of the web browser.</p>\n        <p>An engine is necessary to execute JavaScript code, and as JavaScript is the frontend language of web development, this is why every browser has a JavaScript runtime environment (which includes an engine). Google Chrome's JavaScript engine is one of the more popular engines. It is called V8, it is written in C++, and is open source. </p>\n        {/* \n        Difference between compiled and interpreted languages:\n        The difference between a compiler and an interpreter is similar to the difference between a human language interpreter and a human translator.\n\n        An interpreter goes over the program line by line, translates it, runs it, and then gets the next line. That is like an interpreter that translates sentences one at a time as they're said.\n\n        A compiler takes the whole program, translates it all and then outputs a machine-readable code. That is like sending your article to be translated and getting it back all in French.\n\n        Each method has advantages and disadvantages. If the code is compiled, then any computer can instantly run it without worrying about translating it making it faster, and meaning it needs to only be translated once no matter how many times it is run. Also the user will not have access to the original code. An interpreted program doesn't have to be saved on the computer and lines can be executed one at a time from a different medium, and can also give you accurate information regarding which line did what / had an error / etc.*/}\n        <p>So why has JavaScript traditionally been only used on the frontend? As just discussed, Javascript needs a runtime environment, and an engine (which is part of that environment), to interpret and then execute JavaScript code. These runtime environments were traditionally found on browsers, and their purpose was to interpret frontend code (eg JavaScript code to make websites interactive and manipulate the DOM). However, the browser's JavaScript runtime environment could not be used to interpret and execute server-side/ backend code - in web development, backend/ server side code is separate and runs independently of the browser. Node's innovation was to create it's own runtime environment, using V8 as the engine, so that JavaScript code could be executed on the server side. In addition to the V8 engine, the Node runtime environment also includes modules and APIs that give extra functionality to JavaScript code.\n        </p>\n        \n        <p></p>\n        <p></p>\n        <p></p>\n        <p></p>\n        <p></p>\n        <p></p>\n        \n        \n        </div>\n          </Col>\n        </Row>\n      </Container>\n         \n    );\n  }\n}\n\nexport default EnginesAndRuntime;","import React from \"react\";\nimport \"../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { Link } from 'react-router-dom';\nimport Gist from \"react-gist\";\n\n\nclass ComponentTypes extends React.Component {\n  \n\n  render() {\n    const articleName = \"React Component Types\";\n    return (\n      \n        <Container>\n        <Row>\n          <Col md={{ span: 8, offset: 2 }}>\n            <div className=\"bodyContent\">\n        <p><Link as={Link} className=\"plainP\" to=\"/blog\">Blogpost</Link > &gt; {articleName}</p>\n        <br/>\n        <h3 className=\"subheading\">{articleName}</h3>\n        <br/>\n        <p className=\"publishedDate\">10 Feb 2021</p>\n        <p>The topic of React components touches on a lot of different concepts, such as stateful and stateless components, function components, and class components. Meanwhile, the arrival of Hooks in 2018 changed everything. What do all these things mean, and how do they fit into each other? It can be a bit tricky to understand all these concepts and grasp how they all fit into one another. This article aims to help with that!</p>\n        <h4>Function Components</h4>\n        <p>Function components used to be called functional stateless components, or more simply stateless components, because - big surprise - it used to be impossible for them to contain state. However, since React 16.8 in 2018 and the introduction of Hooks, function components have now received an upgrade, and can now contain state. Before the introduction of Hooks, however, function components were used for components that did not require state. For example, function components can be used for parts of a website that would never have to change based on user input. For example, it is common for visual artists to create simple portfolio websites that are entirely static. This could happily be composed of all function stateless components. Another almost notorious example is the simple <a href=\"https://www.berkshirehathaway.com\" className=\"articleLink\" target=\"_blank\"  rel=\"noopener noreferrer\">website</a> for the multi-billion dollar company Berkshire Hathaway, that hasn't had an upgrade in almost 20 years. Again, there is no need for anything other than stateless function components for this website.</p>\n        <p>A simple function component would look like this:</p>\n        \n        <Gist id=\"65c3c85d9157bb05487b4bd500806ab3\" />\n        <h4>Class Components</h4>\n        <p>The syntax for a class component is a bit more complex.</p>\n        <p>The advantage of class components used to be that they could take state. This means a class component can be modified and updated based on user input. A simple example of this is the humble 'to do list' app, that most beginner programmers have tackled at some point or other! When a user inputs a new list item, and then click submit, no doubt that item will be added to another component. This is done by updating the state of that component.</p>\n        <p>That was the benefit of class components compared to function components. The downside was that the syntax for class components is a bit more complex than for function components. The above function component would look like this if written as a class component:</p>\n        \n        <Gist id=\"7634735736c5a93b50a796c14e4854b1\" />\n        <h4>Hooks</h4>\n        <p>It is not really very difficult to learn how to create function components and class components, or to learn when one or the other should be used. However, the process is even simpler now, as since the introuction of Hooks in 2018 with React 16.8, there is no longer any need for class components, as function components can now take state. And indeed many developers believe that class components are now obsolete, and have no purpose any more. However, because class components are so prominent in existing and legacy code, it could be a while before they are phased out.</p>\n\n        <p>Further reading:</p>\n        <p>Making Sense of React Hooks: React employee Dan Abramov explains the reasons why Hooks was necessary:</p>\n        <p><a href=\"https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889\">https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889</a></p>\n        <br />\n        \n        \n        </div>\n          </Col>\n        </Row>\n      </Container>\n         \n    );\n  }\n}\n\nexport default ComponentTypes;","import React from \"react\";\nimport \"../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport Gist from \"react-gist\";\n\n// eslint-disable-next-line\n{\n  /* <p></p> */\n}\n\nclass MERNSetUp1 extends React.Component {\n  render() {\n    const articleName = \"Setting up a basic MERN stack project: Part 1\";\n    return (\n      <Container>\n        <Row>\n          <Col md={{ span: 8, offset: 2 }}>\n            <div className=\"bodyContent\">\n              <p>\n                <Link as={Link} className=\"plainP\" to=\"/blog\">\n                  Blogpost\n                </Link>{\" \"}\n                &gt; {articleName}\n              </p>\n              <br />\n              <h3 className=\"subheading\">{articleName}:</h3>\n\n              <h4 className=\"subheading\">\n                Our first HTML file, installing Node and NPM, and our first\n                Express server\n              </h4>\n              <br />\n              <p className=\"publishedDate\">10 March 2021</p>\n              <p>\n                The MERN stack is one of the best stacks in which to build large\n                scale web projects. However, the initial set-up, even to build a\n                simple bare-bones project, can be intimidatingly complex for\n                people who are new to programming. This is part 1 of a series of\n                blogposts that guides you to creating a simple bare-bones MERN\n                stack project with full CRUD capabilities. These posts are not\n                for someone completely new to the MERN stack, but rather they\n                are better suited to someone who is familiar with the\n                technologies and wants a succinct reminder on how to set up a\n                project.\n              </p>\n              <h4>Project structure and html</h4>\n              <p>\n                Lets start by creating a folder in your desired location on your\n                computer, which will contain all the code for the entire\n                project. I called my folder <i>MERN_Stack_Bones</i>. Inside this\n                folder, create another folder called <i>ui</i>, and inside this\n                folder create two further folders, <i>src</i> and <i>public</i>.\n                First, we will start with a simple html file. We will call this{\" \"}\n                <i>index.html</i> and put it in the public folder. Add the\n                following code to this file:\n              </p>\n              <Gist id ='b8256ec6e9c6fe8d9610df74d636dec3' />\n            \n              \n            \n              <p>\n                You can open this by double clicking on the file in your\n                device's file viewer, and it should open in your browser and\n                display 'Hello world!'\n              </p>\n              <h4>Node.js and NPM</h4>\n              <p>\n                Now lets set up a server and serve this html file from the\n                server. For this we will be using Node and Express (this\n                represents the N and E from the MERN acronym). To do this you\n                will need Node.js installed on your computer, which you can do\n                very easily from nodejs.org. Once you have downloaded and\n                installed Node.js from their website, you can check it has been\n                installed successfully by typing 'node --version' (or 'node -v'\n                if you prefer) into the command line. You should get a response\n                like 'v12.18.3', in which case you can see it has been installed\n                successfully. Importantly, when you download Node.js, you also\n                get NPM, which you will be using a lot. Check you have NPM\n                installed by typing npm --version (or npm -v) into the command\n                line.\n              </p>\n              <p>\n                Packages for your project will be very important, and you will\n                no doubt end up using many of them. Express itself is a package\n                you will be using, and all the packages will be installed using\n                NPM. But before you can install any packages, you will have to\n                initialise the project, which you do by typing 'npm init' on the\n                command line (while the command line is in <i>ui</i> folder of\n                the project root directory). For now, click 'enter' on all\n                prompts from the command line to accept all the default settings\n                of the initialisation. Once complete, you will notice you have a\n                file named <i>package.json</i> file in the <i>ui</i> folder,\n                which contains useful information about the project.\n              </p>\n              <h4>Express</h4>\n              <p>\n                Now that you have initialised the project with npm you can begin\n                to install packages locally to the project. First and foremost\n                of these, for our purposes, is the Express package. To do this,\n                with the command line still in the <i>ui</i> folder, type 'npm\n                install express'. Now the project has Express installed on it,\n                which you can see by noticing the new node_modules folder in\n                your project which contains Express.\n              </p>\n              <p>\n                As we now have Express, we can create a server. Create a new\n                file in the <i>ui</i> folder called <i>server.js</i> with the\n                following code:\n              </p>\n              <Gist id ='98d1af8bfa2865a59bb6850308ddeaad' />\n                \n              \n              <p>\n                Now, in the command line (in the <i>ui</i> folder), you can type\n                'node server.js', and the server will start, and serve{\" \"}\n                <i>index.html</i>. To see it, open up your browser and type in\n                http://localhost:4000 in the URL bar, and you will see our\n                'Hello world!' page.\n              </p>\n              <p>\n                Typing 'node server.js' is one way of launching the server,\n                however it is considered good practice to create a start script\n                which enables you to launch the same file by typing 'npm start'\n                into the command line. To create this script, in the{\" \"}\n                <i>package.json</i> file in the <i>ui</i> folder, under\n                'scripts', create a new script like this: \"start\": \"node\n                server/server.js\". Now, instead of typing 'node server.js' in\n                the command line to start the server, you can just type 'npm\n                start'.\n              </p>\n              <p>\n                This is a great start in our journey to creating a simple MERN\n                stack project with full CRUD capabilites, as we have already\n                covered the E(xpress) and N(ode.js) parts of the MERN stack\n                acronym.\n              </p>\n              <h4>Recap</h4>\n              <p>Let's recap the steps:</p>\n              <p>Step 1: create a project directory on the compute. Inside the project directory create a folder called ui. In the ui folder create two folders, one called public and one called src</p>\n              <p>\n                Step 2: create a basic 'hello world' file in index.html which goes in the public folder.\n              </p>\n              <p>\n                Step 3: Download and install Node on our computer. Initialise\n                the project (with the command line in the ui folder) with NPM so that we can start installing packages.\n              </p>\n              <p>\n                Step 4: Install express locally, and create our server in a file\n                called <i>server.js</i> (which goes in the ui folder), which serves the <i>index.html</i> file.\n              </p>\n              <p></p>\n              <p>\n                Currently, the code and folder structure of your project should\n                look identical to branch 01 of the project hosted here on\n                GitHub:{\" \"}\n                <a\n                  href=\"https://github.com/StephenDoyle10/MERN_Stack/tree/01\"\n                  className=\"articleLink\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  https://github.com/StephenDoyle10/MERN_Stack/tree/01\n                </a>\n              </p>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default MERNSetUp1;\n\n","import React from \"react\";\nimport Gist from \"react-gist\";\nimport \"../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { Link } from 'react-router-dom';\n\n\nclass MERNSetUp2 extends React.Component {\n\n  render() {\n    const articleName = \"Setting up a basic MERN stack project: Part 2\";\n    return (\n      \n        <Container>\n        <Row>\n          <Col md={{ span: 8, offset: 2 }}>\n            <div className=\"bodyContent\">\n                <p><Link as={Link} className=\"plainP\" to=\"/blog\">Blogpost</Link > &gt; {articleName}</p>\n                <br/>\n                <h3 className=\"subheading\">{articleName}:</h3>\n                \n                <h4 className=\"subheading\">React, Babel and Webpack</h4>\n                <br/>\n                <p className=\"publishedDate\">11 March 2021</p>\n                <p>Welcome to Part 2 in our step-by-step guide to setting up a basic bare-bones MERN stack project with full CRUD capabilities. If you had follwed along with <Link className=\"articleLink\" as={Link} to=\"/mernsetup1\">part 1</Link>, your code should look like <a href=\"https://github.com/StephenDoyle10/MERN_Stack/tree/01\" className=\"articleLink\" target=\"_blank\" rel=\"noopener noreferrer\">this</a> currently. Now lets add React to our project (and if at any point you get stuck you can view how the code is supposed to look by the end of this post <a href=\"https://github.com/StephenDoyle10/MERN_Stack/tree/02\"className=\"articleLink\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>)</p>\n                <p>A common complaint about React is how difficult it is for beginners to get into, and we will see that now, as before we can even publish a simple 'hello world' message, we will have to get into the weeds of Babel and Webpack (Browserify or other alternatives are sometimes used instead of Webpack, but I prefer Webpack).</p>\n                <h4>React Architecture</h4>\n                <p>To show why Babel and Webpack are important for React, lets first take a quick look at the typical architecture of the React part of a MERN project. Typically, there will be a simple html file with a largely empty body, although there will be at least one element that has an id property. We call this a \"root\" DOM node because everything inside it will be managed by React DOM. Applications built with React usually have a single root DOM node. Elsewhere in the project directory, outside of this html file, there will be a JavaScript file that contains html-like code, and this file will be the main entry point for the app. This JS file is considered a parent, and there may be other JS files that contain more html-like code that can be rendered into that parent. These other JS files will be children of the parent. There might be yet more JS files with more html-like code that gets rendered into the children; these are considered children of the children. And so it continues, and soon a tree is formed, with the initial JS file parent at the top, and children below, and children of children below that and so on. There is a name for such a JS file: a component. Components are the building blocks of React and are essential to it.</p>\n                <h4>JSX</h4>\n                <p>So where does Babel come into it? These aforementioned JS components contain both JavaScript logic code, as well as code that ends up being rendered as html. Writing JS code that is supposed to result in html does not come naturally, and neither does it look pretty, and does not give us the neat and tidy indentations we get when we write pure html. To solve this problem, a syntax extension for JS was created called JSX (which stands for JavaScript XML), which allows us to write html directly into JS code, and is much more user friendly, and easier to read, write and debug. However, it should be kept in mind, you can forego JSX and write all your components in JS, although this is not recommended.</p>\n                <p>So JSX makes it easy to use html in our JS code. Great, right? Yes, but it does come with a problem. Browsers all come with runtime engines that enables them to execute JavaScript. However, these engines are not designed to be able to understand JSX, and indeed they don't. A react project filled with JSX files will not work in the browser, as the browser will not know what to do with the JSX files. That's where Babel comes in: Babel is used to convert JSX files into JS files.</p>\n                <p>Previously in this post, when speaking of typical React architecture, I mentioned how there will be a html file with a largely empty body, and a JS file that serves as the app's entry point that renders html into this html file. Lets set this up now. In fact, we already have the html file, except in our html file the body is not empty - it contains a 'Hello world!' message. Let's remove this message from the html file, as instead we will be rendering a JS element here. The empty &lt;div id=&quot;contents&quot;&gt;&lt;/div&gt; is now our root Dom node and everything inside it will be managed by React DOM. Also, while we are editing our html file, we will add a script attribute that points to the external JS file which contains our JSX element which will be our entry point to the app, that will render the 'hello world' message into the body of <i>index.html</i>. So here is how your html file should look now:</p>\n                \n                <Gist id ='2629f40abd1c75d1622a980bf3233989' />\n                  \n                \n                <p>In a moment we will be creating our first JSX element but for this element to work we will need a couple of packages, so lets install these now. With the command line open in the <i>ui</i> folder, type 'npm install react react-dom'. As their names suggest, these two packages are crucial for React. Once these two packages are installed create a file called <i>App.jsx</i> in the src folder. It will look like this:</p>\n                <Gist id ='865eb5eb4a74a80439c559f401e010e0' />\n                \n                \n                <p>So what does this code mean? Well, we just installed React and React-dom, but actually it is no good just installing them. To use them in a file, you must import them. That is what is happening on the first two lines - React and React-dom are imported into the file, so that their methods can be used. The line after this contains the html element that will be rendered into the <i>index.html</i> file. The final line is the code that does the rendering: ReactDom's render method takes two arguments - firstly, the element which is due to be added somewhere, and secondly, the element where it is to be added - in this case, it will go looking for an element with the id of 'contents', which, if you recall, is the empty div element in <i>index.html</i>.</p>\n                <h4>Transforming JSX to JS with Babel</h4>\n                <p>So this is easy right? All you have to do now is run 'npm start' in the command line and our element will be rendered in the html file, which we can see on localhost:4000? Unfortunately not. Remember we said browsers cannot read JSX! So this is when we bring in Babel. </p>\n                <p>For this we need to use npm to install three different Babel related packages. The first is babel core, which is the core babel library. The seceond is babel cli, which enables us to use Babel commands on the command line, and the third is babel preset-react, which are important presets for react. So simply type 'npm install --save-dev @babel/core @babel/cli @babel/preset-react' to get them all (and as you do so, you should surely by now be starting to see why npm is so great right?!)</p>\n                <p>Now we can transform our App.jsx file into pure JS. The following command line does that, and outputs the new JS file in the public folder: \"npx babel src --presets @babel/react --out-dir public\"</p>\n                <h4>Bundling files with Webpack</h4>\n                <p>Wonderful! Now we can run the server with 'npm start' and the JS file will render in the html file and we can see out glorious 'hello world' message in localhost:4000, right? Well, no, not yet, sadly. There is another problem. You remember when I said a typical React project usually ends up containing lots of different components - a tree of parents and children - each in its own JS file. These are called modules, but browsers do not like modules, they prefer all the JavaScript to be in a single file, and trip over typical module methods such as 'require', and throw an error. This is where webpack comes in. Webpack bundles the different modules into a single file.</p>\n                <p>So let's install webpack with \"npm install --save-dev webpack webpack-cli\". And with the following command, we can tell webpack to take our <i>App.js</i> and bundle it together with its dependencies (in this case React and React-dom), and to output a new file in the public folder: \"npx webpack ./public/App.js --output-path public --mode development\". This new file has the default name of <i>main.js</i>, and you should see it in your public folder now. If you recall, we have already pointed to this in the script attribute in our html file: \"&lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt;\". This means you can now run \"npm start\" and if you go to localhost:4000 in your browser you should see 'hello world' in all its glory!</p>\n                <p>Well done, you know have React, Express and Node.js all up and running and in harmony with each other!</p>\n                <h4>Recap</h4>\n                <p>Let's recap the steps:</p>\n                <p>Step 1: Modify the index.html.</p>\n                <p>Step 2: Create a file in the src folder called App.jsx.</p>\n                <p>Step 3: Install babel/core, babel/cli and babel/preset-react with npm.</p>\n                <p>Step 4: Run \"npx babel src --presets @babel/react --out-dir public\" to transform App.jsx into App.js, ie valid JavaScript.</p>\n                <p>Step 5: Install webpack and webpack-cli with npm.</p>\n                <p>Step 6: Run \"npx webpack ./public/App.js --output-path public --mode development\" to transform App.js and its dependencies into main.js, which the browser will be able to execute when the app is launched.</p>\n\n                <p>Currently, the code and folder structure of your project should look identical to branch 02 of the project hosted here on GitHub: <a href=\"https://github.com/StephenDoyle10/MERN_Stack/tree/02\"className=\"articleLink\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/StephenDoyle10/MERN_Stack/tree/02</a></p>\n                \n              \n            </div>\n          </Col>\n        </Row>\n      </Container>\n         \n    );\n  }\n}\n\nexport default MERNSetUp2;\n","import React from \"react\";\nimport \"../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport Gist from \"react-gist\";\n\nclass MERNSetUp3 extends React.Component {\n  render() {\n    const articleName = \"Setting up a basic MERN stack project: Part 3\";\n    return (\n      <Container>\n        <Row>\n          <Col md={{ span: 8, offset: 2 }}>\n            <div className=\"bodyContent\">\n              <p>\n                <Link as={Link} className=\"plainP\" to=\"/blog\">\n                  Blogpost\n                </Link>{\" \"}\n                &gt; {articleName}\n              </p>\n              <br />\n              <h3 className=\"subheading\">{articleName}:</h3>\n\n              <h4 className=\"subheading\">More Babel and Webpack</h4>\n              <br />\n              <p className=\"publishedDate\">12 March 2021</p>\n              <p>\n                This is Part 3 of our complete walkthough to setting up a basic\n                bare-bones MERN stack project with full CRUD capabilities. If\n                you had followed along with parts 1 and 2, your code should look\n                like{\" \"}\n                <a\n                  href=\"https://github.com/StephenDoyle10/MERN_Stack/tree/02\"\n                  className=\"articleLink\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  this\n                </a>{\" \"}\n                currently. In part 2 we added React to our project, as well as\n                some Babel and Webpack which are almost essential to any React\n                project. If at any point you get stuck you can view how the code\n                is supposed to look by the end of this post{\" \"}\n                <a\n                  href=\"https://github.com/StephenDoyle10/MERN_Stack/tree/03\"\n                  className=\"articleLink\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  here\n                </a>\n                .\n              </p>\n              <h4>Babel and support for older browsers</h4>\n              <p>\n                We spent some time with Babel and Webpack in part 2, but we are\n                not quite done with them yet. In that post we used just enough\n                Babel so that our project would run in the browser. We utilized\n                the aspect of Babel that converts JSX into JavaScript. However,\n                there is a further Babel feature that it is considered best\n                practice to include, which we will add now.\n              </p>\n              <p>\n                So why is this extra bit of Babel necessary? JavaScript is\n                always evolving and growing, often at a faster rate than\n                browsers can keep up with. In other words, your project may\n                include some cutting edge modern JavaScript, whereas the\n                browser's runtime engine has not been updated to be able to\n                execute that code. If so, an error will be thrown and the\n                project will likely crash. This is where Babel comes in. On the\n                development side, you can write code using the very latest\n                JavaScript features (for example, all the features that came\n                with ES6, such as arrow functions), then before putting this\n                code into production, you can run it through Babel which\n                transpiles the code so that it can run on older browsers\n              </p>\n              <p>\n                We do this by installing babel.preset-env, so on the command\n                line run 'npm install --save-dev @babel/preset-env'. The let's\n                create a babel configuration file that tells the program the\n                browser support we require. This file will be called .babelrc\n                and we will put it in the src folder. Populate the file as\n                follows:\n              </p>\n              <Gist id=\"30b3988df1d93f5914bdd2e08e65c45a\" />\n\n              <p>\n                The last time we compiled the jsx with Babel we used the command\n                line instruction \"npx babel src --presets @babel/react --out-dir\n                public\". However, now that we have the presets stated in a\n                config file, now we only need to type \"npx babel src --out-dir\n                public\". Do this now. You will see that the App.js is now\n                slightly different than before, as it has been compiled into\n                older syntax, although the functionality remains the same.\n              </p>\n              <p>\n                Let's do two more quick precautionary bits of housekeeping which\n                may end up not being necessary, but could save us from headaches\n                and bugs down the road depending on the direction the project\n                takes. Install the following two packages with the following\n                command: 'npm install whatwg-fetch babel-polyfill'. Then add\n                them to App.jsx by adding these two lines at the top of the\n                file: \"import 'babel-polyfill' \" and \"import 'whatwg-fetch' \".\n                What does this do? Simply, there is some modern functionality\n                not supported by older browsers, and using these packages\n                ensures that the app will not crash if it attempts to use such\n                functionality.\n              </p>\n              <h4>Combining Babel and Webpack into a single build step</h4>\n              <p>\n                So currently, when we create a JSX component, in order for it to\n                be executed in the browser we have to transform it into a new\n                file with Babel. Then we need to bundle that new file with\n                Webpack to create another file (<i>main.js</i>). These are\n                called 'build steps', and at the moment it takes two build steps\n                to convert JSX into a file the browser can execute. Luckily,\n                however, Webpack can be configured with Babel, so that Webpack\n                can combine both steps into a single step. For this we need to\n                \"npm install --save-dev babel-loader\", and also create a file\n                called <i>webpack.config.js</i> in the <i>ui</i> folder.\n              </p>\n              <p>\n                When bundling with webpack, it is considered good practice to\n                separate application code and library code (ie the code from\n                Node Modules). Currently, webpack is bundling our JSX file (and\n                any other files we may write), with the 100s of node_modules we\n                are using. We can configure Webpack so that our App code is\n                bundled into a file called <i>app.bundle.js</i>, while code from\n                third party libraries we use is bundled into a file called{\" \"}\n                <i>vendor.bundle.js</i>. To do this, the{\" \"}\n                <i>webpack.config.js</i> file should look like this:\n              </p>\n              <Gist id=\"8764d634c6e10266e7db3bea8fdfe0ed\" />\n\n              <p>\n                Previously, to run webpack and bundle our files, we used the\n                command line \"npx webpack ./public/App.js --output-path public\n                --mode development\". Quite a mouthful! However, since we have a\n                configuration file now, all we have to type in the command line\n                to use webpack now is \"npx webpack\". Try it now (although first\n                delete <i>main.js</i> - our pre-existing bundled file in the\n                public folder). After typing \"npx webpack\", did you see two\n                bundled files (<i>app.bundle.js</i> and <i>vendor.bundle.js</i>)\n                appear in the public folder? If so, then all is well!\n              </p>\n              <p>\n                So now every time we use webpack, all our code will be bundled\n                into two JavaScript files, <i>app.bundle.js</i> and{\" \"}\n                <i>vendor.bundle.js</i>. However, currently our html file has\n                just one script attribute, and it is pointing to <i>main.js</i>.\n                Our app code is now being bundled to <i>app.bundle.js</i>, so\n                let's make our script attribute point here, instead of to{\" \"}\n                <i>main.js</i>, and also let's add a second script attribute\n                that points to <i>vendor.bundle.js</i>. Your index.html file\n                will now look like this:\n              </p>\n              <Gist id=\"a7051ce81b6583a5cf563917119c8d44\" />\n\n              <p>\n                Run the project now with \"npm start\" and see if we have our\n                'Hello world!' message at localhost:4000.\n              </p>\n              <h4>Watch</h4>\n              <p>\n                So, anytime we make changes to our code we just have to run \"npx\n                webpack\" to transform our code into a production-ready bundle.\n                Awesome, right? Well, it gets even better, as webpack has an\n                option that looks out for any changes that are saved to the JSX\n                files, and then automatically bundles the changes. To do this,\n                type 'npx webpack --watch' in the terminal. On doing this,\n                webpack straightway creates a new bundle of all relevant JSX\n                files (which may take a while), then it stays open and sits in\n                wait for when you save any changes. When it detects any changes,\n                it immediately creates a new bundle (without you having to\n                direct it to in the command line with 'npx webpack'). Let's try\n                this: type 'npx webpack --watch', and you will see a fresh\n                bundle is created. Now go to your App.jsx file, and change\n                'Hello world!' to 'Hello Universe!' and then save your changes.\n                In the terminal you should see webpack jump into life the moment\n                you click on save, and create a new bundle, and if you checked\n                on localhost:4000 you should see our message now says 'Hello\n                universe!' instead of 'Hello world!' (a page refresh may be\n                necessary). And in fact, let's create a 'watch' script in the{\" \"}\n                <i>package.json</i> file to make this process even simpler. In\n                the <i>package.json</i> file, under the start script, add the\n                following watch script: \"watch\": \"webpack --watch\". Now to start\n                webpack watching, instead of typing 'npx webpack --watch', you\n                can just type 'npm run watch'.\n              </p>\n              <p>\n                Currently, the code and folder structure of your project should\n                look identical to branch 03 of the project hosted here on\n                GitHub:{\" \"}\n                <a\n                  href=\"https://github.com/StephenDoyle10/MERN_Stack/tree/03\"\n                  className=\"articleLink\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  https://github.com/StephenDoyle10/MERN_Stack/tree/03\n                </a>\n              </p>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default MERNSetUp3;\n\n","import React from \"react\";\nimport \"../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport Gist from \"react-gist\";\n\nclass MERNSetUp4 extends React.Component {\n  render() {\n    const articleName = \"Setting up a basic MERN stack project: Part 4\";\n    return (\n      <Container>\n        <Row>\n          <Col md={{ span: 8, offset: 2 }}>\n            <div className=\"bodyContent\">\n              <p>\n                <Link as={Link} className=\"plainP\" to=\"/blog\">\n                  Blogpost\n                </Link>{\" \"}\n                &gt; {articleName}\n              </p>\n              <br />\n              <h3 className=\"subheading\">{articleName}:</h3>\n\n              <h4 className=\"subheading\">Displaying our first data</h4>\n              <br />\n              <p className=\"publishedDate\">14 March 2021</p>\n              <p>\n                This is Part 4 of our complete walkthough to setting up a basic\n                bare-bones MERN stack project with full CRUD capabilities. If\n                you had followed along with parts 1 and 2, your code should look\n                like{\" \"}\n                <a\n                  href=\"https://github.com/StephenDoyle10/MERN_Stack/tree/03\"\n                  className=\"articleLink\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  this\n                </a>{\" \"}\n                currently. If at any point you get stuck you can view how the code\n                is supposed to look by the end of this post{\" \"}\n                <a\n                  href=\"https://github.com/StephenDoyle10/MERN_Stack/tree/04\"\n                  className=\"articleLink\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  here\n                </a>\n                .\n              </p>\n              <p>So far our project has simply displayed a 'Hello world!'' message. However, if our app is to be a full stack project allowing full CRUD capabilities, it will have to do more than display 'Hello world!' So what are we going to build? Our aim is not to bulid anything fancy, but rather to create a bare bones MERN stack project, but one that still has full CRUD capabilities. By creating something with such few frills, we can clearly see what a MERN stack project looks like when stripped down to its bare essentials, and with all embellishments removed. To this end, we will be building a guest book, in which any user can visit the site and (C)reate and leave a greeting message, can edit or (U)pdate their message if they wish to make a change,can (R)ead thier own and other people's messages that have been left there, or can (D)elete their message if they wish (and so the four CRUD features are accounted for - create, remove, update and delete). </p>\n              <p>Eventually, all our data (the greeting messages, and the names of those who wrote the messages) will be stored on, and retrieved from, a database - in this case MongoDB (the M of MERN stack), but for now we will include some rudimentary data for demonstration purposes and store it as an array inside our project code. Let's set up this data now, in a new file called data.js, which we will save in the src folder. Set up the array of data as followed:</p>\n              <Gist id=\"11e0a8a14862b066637e9c4778f9a747\" />\n              <p>So this data represents three greeting messages. As for the line at the end: 'module.exports = greetingsData;' - for the functions or variables contained within any JavaScript files to be made available to other JavaScript files in the same project, we must export it (while the file that needs it must import it, which we will see in a moment). We want the variable greetingsData to be available to another file, so we must export it.</p>\n              <p>We will create our first actual React component now (as App.jsx is actually an element, not a component). This component will map through the three objects in greetingsData and render that data to the screen. Create a file called Greetings.jsx and save it in the src folder. Fill up the file like this:</p>\n              <Gist id=\"2a6daa6b66c4a532dc56c483d5b24d70\" />\n              \n              \n              \n              <p>\n                Currently, the code and folder structure of your project should\n                look identical to branch 04 of the project hosted here on\n                GitHub:{\" \"}\n                <a\n                  href=\"https://github.com/StephenDoyle10/MERN_Stack/tree/04\"\n                  className=\"articleLink\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  https://github.com/StephenDoyle10/MERN_Stack/tree/04\n                </a>\n              </p>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default MERNSetUp4;\n\n","import React from \"react\";\nimport \"../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { Link } from 'react-router-dom';\nimport Gist from \"react-gist\";\n\n\nclass GraphQL extends React.Component {\n\n  render() {\n    const articleName = \"GraphQL\";\n    return (\n      \n        <Container>\n        <Row>\n          <Col md={{ span: 8, offset: 2 }}>\n            <div className=\"bodyContent\">\n              <p><Link as={Link} className=\"plainP\" to=\"/blog\">Blogpost</Link > &gt; {articleName}</p>\n              <br/>\n              <h3 className=\"subheading\">{articleName}</h3>\n              <br/>\n              <p className=\"publishedDate\">22 March 2021</p>\n              <h4>REST APIs vs GraphQL</h4>\n              <p>GraphQL is an alternative to RESTful APIs that has been growing in popularity in recent years. So why has GraphQL been getting so popular? This largely has to do with the gains in efficiency that GraphQL grants your project, compared to REST. The problem with REST API calls is that they often result in overfetching and underfetching. Let's imagine you are using REST APIs and that you need to make an API call to retrieve a particular user's first name, second name, and home town from a database. However, the API may be set up so that all calls return an object that includes not just the user's first name, second name, and home town, but also their age, weight, height, marital status and lots of other details that you have no interest in. You have no choice but to recieve this object that contains all this data that you do not need. This is called overfetching. Now let's say that in addition to finding out the first name, second name, and home town of a particular user, you also wish to find out the population of that home town. Town information is kept separately from user information and accessed from a different endpoint, so to get that information you will have to call another endpoint - the call to the first endpoint does not return all the information you require. This is called underfetching.</p>\n              <p>GraphQL is different, as when you make a GraphQL API call you can declare exactly what information you require, and that is the exact information that will be returned to you. Also, all information is accessed from a single endpoint (so, to continue our example, user information as well as town information would be accessed from the same endpoint, and thus only require a single http request) whereas REST APIs usually utilise multiple endpoints (which means that multiple API calls are often required to get information). There is an amazing 4-minute illustrated youtube video that explains all this very well, and that you can watch <a\n                  href=\"https://www.youtube.com/watch?v=oPZoNjyTW3w\"\n                  className=\"articleLink\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  here\n                </a>.</p>\n              <p>So let's look at the core ingredients that are needed in your project code to get GraphQL up and running.</p>\n              <h4>Schema</h4>\n              <p>Firstly there is the schema, which describes the shape of the data graph, and also specifies exactly which queries and mutations are available to execute against the data graph. Similar to strongly typed langages (and thus dissimilar to JavaScript), the exact type (eg number, string, boolean etc) that all arguments and returned values will take are defined. One option is to put this schema in a file of its own, called 'schema.graphql', or you can store it as a variable in your JavaScript code. </p>\n              <p>The most important type definitions are always the queries and the mutations (which are called top level decalrations). The queries define how data can be read, while the mutations define how data can be created, updated or deleted. This example shows the schema for a simple guestbook app in which people can see messages other people have left, and also create, update and delete messages of their own.</p>\n              <Gist id=\"210584e06939b6d3deffd8883cd2cf0d\" />\n              <h4>Resolvers</h4>\n              <p>Next, there are resolvers. These are functions that provide the instructions for what exactly a GraphQL operation does when it is called. For example, in the following code snippet, there is an operation to create a new greeting message, and the resolver function has a method that adds that message to the data/ list of existing messages:</p>\n              <Gist id=\"b02b2690bd340d4c5746e57ae73a2bbb\" />\n              <h4>Server</h4>\n              <p>With the schema and resolvers set up, we just have to provide this information to the server when we intialise it. There are a number of GraphQL server options available, but my preference is to integrate Apollo Server (one of the most popular GraphQL servers) with Express (a Node.js web application framework), and that's the example we will use here: </p>\n              <Gist id=\"935316f00e724b85fd5e010f0e6dc76d\" />\n              <p>Note in this code snippet when we create a new instance of ApolloServer, we must pass two properties into it: typeDefs (short for type definitions), which takes our schema as a property value (in this case, the schema is saved in another file called schema.graphql), and the resolvers.</p>\n              <h4>Playground</h4>\n              <p>At this point you can visit the URL of the server and start testing it by making queries in the Playground. Indeed, at this stage in the project, this is the only way to test the code, as so far all our code has been on the back end. But it is good to test it first in the Playground before intergrating it into the front end UI. One reason for this is that if the code works as expected in the Playground, but then fails to work in the UI, then we know the problem lies in the UI code, and not in the schema, resolvers, or API server.</p>\n              <h4>Fetch API</h4>\n              <p>The schema, resolvers and setting up of the Apollo server are all carried out on the API side. On the UI side, we will have a function that activates on an 'event' (for example, when the user clicks a submit button). The most important feature of this function will be the sending of a call with the fetch API.</p>\n              <p>The first argument passed to our fetch method is the URL endpoint of the resource that we wish to fetch. This endpoint was established earlier in our installHandler function (see above). The second argument (said to be optional although for GraphQL and for our purposes it is essential) is an object containing custom settings that you want to apply to the request. When using fetch with GraphQL, there are three key settings we have to include here: method, headers and body.</p>\n              <p>In the method setting, for the majority of times with GraphQL this will be \"POST\". In the body setting, we want to include a query. This will be exactly how the query was written when it was tested successfully in the playground. However, the query has to be sent as JSON or it will not work, so we put the query as an argument in a JSON.stringify() method.</p>\n              <p>We also need to use the header setting, as the client has to tell the server what type of data will be sent. In this case, the media type will be JSON, so we include the headers property: &#123;'Content-Type': 'application/json'&#125;</p>\n              <p>Going back to our guestbook, and specifically code for adding to the guestbook, our code on the UI side might look something like this: first here is the html which contains the necessary form and event trigger (onSubmit):</p>\n              <Gist id=\"5270eb2ecf623ff5459043f0a4b7c239\" />\n              <p>Then here is the function - handleSubmit() - which is called on clicking submit. This function in turn calls another function - createGreeting():</p>\n              <Gist id=\"721b12420f1e73c9625bae52f0848d2a\" />\n              <p>And that's some of the basics of GraphQL!</p>\n              \n\n              \n              \n              \n              \n            </div>\n          </Col>\n        </Row>\n      </Container>\n         \n    );\n  }\n}\n\nexport default GraphQL;\n","import React from \"react\";\nimport \"../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { Link } from 'react-router-dom';\n\n\nclass GitCommands extends React.Component {\n\n  render() {\n    const articleName = \"Popular Git Commands\";\n    return (\n      \n        <Container>\n        <Row>\n          <Col md={{ span: 8, offset: 2 }}>\n            <div className=\"bodyContent\">\n              <p><Link as={Link} className=\"plainP\" to=\"/blog\">Blogpost</Link > &gt; {articleName}</p>\n              <br/>\n              <h3 className=\"subheading\">{articleName}</h3>\n              <br/>\n              <p className=\"publishedDate\">06 April 2021</p>\n              <p>This article goes through some of the most popular and important Git commands.</p>\n              <p>First, if you working with team, often code will be stored remotely so that all team members can access it. A popular place to store such code is GitHub, althought there are many other options. At some point you may have to get the project code from the remote repo (eg code on GitHub) and onto your local machine (eg on your laptop). To do this, you must clone the project code from the remote. This can be done with the following command:</p>\n              <pre><code>git clone &lt;URL of repo&gt;</code></pre>\n              <p>This will create a folder in the working directory that contains the code in the repo. That folder will be given a default name, although you can give it your own name if you clone in the following way:</p>\n              <pre><code>git clone &lt;URL of repo&gt; &lt;name you want to give project&gt;</code></pre>\n              <p>You also have the option of cloning just a particular branch of the project:</p>\n              <pre><code>git clone --single-branch --branch &lt;branch name&gt; &lt;URL of repo&gt; &lt;name you want to give project&gt;</code></pre>\n              <hr/>\n              <p>So that's how we clone a remote repo onto our local device. We can also do the opposite, in other words, push code from our local device to a remote repo. First you have to make sure your project is a git repository. If it is a clone, then it is already a git repo. Alternatively, if you have started a code project from scratch on your local device, then it is most probably not a git repository yet. You can make it into a git repo with (make sure terminal is open in the relevant directory):\n\n              \n              </p>\n              <pre><code>git init</code></pre>\n              <p>Git init command creates/ initializes a new Git project/ repository. It creates a .git folder with all the tools and data necessary to maintain versions.</p>\n              <p>If you want to push this git repo to a remote repository (for example, one saved on GitHub), the repo must have a remote. There may already be a remote connected to the repo (for example, if the repo is a clone). You can check if there is already a remote with:</p>\n              <pre><code>git remote -v</code></pre>\n              <p>If there is a remote connected to the repo, but you wish to change it to a different remote:</p>\n              <pre><code>git remote set-url origin &lt;URL of new remote&gt;</code></pre>\n              <p>If there is no remote and you wish to add one:</p>\n              <pre><code>git remote add origin &lt;URL of remote&gt;</code></pre>\n              <p>A note about 'origin': 'origin' is a shorthand name for the remote repo, like a variable name. It is used instead of the repo's URL, so referencing is much easier. And actually you can use any name to reference the URL, not just 'origin', however using the name 'origin' is the popular convention.</p>\n              <hr/>\n              <h5>Branches</h5>\n              <p>When working with Git and GitHub you will come across times when you want to push to different branches, rather than the master branch. For example, you might want to do this if the code is experimental and you want to test it more thoroughly before pushing it to the master branch.</p>\n              <p>By default, your project will be working on the master branch. You can check by typing:\n              </p>\n              <pre><code>git branch</code></pre>\n              <p>or</p>\n              <pre><code>git branch --list</code></pre>\n              <p>This lists all the branches in your repo. Also, the branch you are currently in will be highlighted. If you want to switch to a different branch:</p>\n              <pre><code>git checkout &lt;name of branch you want to switch to&gt;</code></pre>\n              <p>If you want to create a new branch and switch to that new branch:</p>\n              <pre><code>git checkout -b &lt;name of branch you want to create and switch to&gt;</code></pre>\n              <p>If you just want to create a new branch but not switch to it:</p>\n              <pre><code>git branch &lt;name of branch you want to create&gt;</code></pre>\n              <p>If you want to delete a branch locally:</p>\n              <pre><code>git branch -d &lt;name of branch you want to delete&gt;</code></pre>\n              <hr/>\n              <h5>add, commit and push</h5>\n              <p>add, commit and push are the like the Git holy trinity, for when you are happy with your code on your local device and want to push it to the remote repo. First, you have to add the necessary files to the staging area. If you wish to add a particular file to the staging area:</p>\n              <pre><code>git add &lt;file name&gt;</code></pre>\n              <p>or, to add a particular folder to the staging area:</p>\n              <pre><code>git add &lt;folder name&gt;</code></pre>\n              <p>or, to add the entire project to the staging area:</p>\n              <pre><code>git add .</code></pre>\n              <p>Now we can record changes with:</p>\n              <pre><code>git commit -m \"commit message\"</code></pre>\n              <p>Finally, we can push these changes to the remote repo with:</p>\n              <pre><code>git push origin &lt;branch name&gt;</code></pre>\n              <p>So if you have used these commands to push code from your computer to a GitHub repo, you can now go online to GitHub, and you will see that the relevant repo there has been updated.</p>\n\n            </div>\n          </Col>\n        </Row>\n      </Container>\n         \n    );\n  }\n}\n\nexport default GitCommands;","import React from \"react\";\nimport \"../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { Link } from 'react-router-dom';\n\n\nclass MernToHeroku extends React.Component {\n\n  render() {\n    const articleName = \"Deploying a MERN stack project to Heroku\";\n    return (\n      \n        <Container>\n        <Row>\n          <Col md={{ span: 8, offset: 2 }}>\n            <div className=\"bodyContent\">\n              <p><Link as={Link} className=\"plainP\" to=\"/blog\">Blogpost</Link > &gt; {articleName}</p>\n              <br/>\n              <h3 className=\"subheading\">{articleName}</h3>\n              <br/>\n              <p className=\"publishedDate\">01 April 2021</p>\n              <p>GitHub Pages is a fairly straighforward, and free, way to deploy front end projects, and get them online. I am definitely a fan, and have used GitHub pages to deploy all my front end projects, including my salary calculator, and also my personal portfolio webiste (which is the website you are looking at right now!). However, when it comes to full stack projects (in other words, a project in which users can signin and create their own content on the site) we need to look further afield than GitHib Pages, as GitHub Pages can only handle front end projects. One of the most popular free choices for deploying full stack projects is Heroku, and in this blog post I'll be looking at MERN stack projects specifically, and how to deploy them on Heroku. </p>\n              <h4>A word on MERN project architecture</h4>\n              <p>You can see the code for an example MERN stack project <a\n                  href=\"https://github.com/StephenDoyle10/Guestbook\"\n                  className=\"articleLink\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  here\n            </a>. Note how it uses two servers, which is a popular approach to MERN stack project architecture. One server serves static files (this, as well as all associated files, is kept in the UI folder). The other server hosts just the API (this, along with associated files, is kept in the API folder). This is important, because it means that on Heroku we will actually be creating and deploying 2 applications (an API application and a UI application), not just one.</p>\n            <p>We'll start with the API application, but first we'll have to create a Heroku account, if we don't already have one. This can be done from https://heroku.com. We'll also have to install the Heroku CLI (command line interface), which further requires that we have Git installed on our device. The Heroku CLI enables us to perform important Heroku-related actions in the terminal. Once you have installed the necessary software, you can type 'heroku login' in the terminal to make sure you are logged in.</p>\n            <h4>API application</h4>\n            <p>Now we are ready to create and deploy our API application. Before deploying, make sure the server.js file has the following line near the top:</p>\n            <pre><code>const port = process.env.PORT</code></pre>\n            <p>This is because Heroku will set the port number itself, as an environment variable, which can be accessed at 'process.env.PORT'. This is where you want the app to listen. If you try and choose your own port number (eg 3000, or 8000, or whatever), the deployment will fail.</p>\n            <p>Next, ensure you have a .gitignore file in the API folder, that contains the line 'node_modules', as we want Heroku to ignore the node modules in the folder, as Heroku will run 'npm install' anyway after copying over the files from the Git repository. Since we have package.json and package-lock.json files, Heroku will know which node modules are to be installed.</p>\n            <p>Next, with the terminal open and pointing to the API folder, we have to make the following commands (if you are familiar with GitHub, these are the same commands you execute when preparing to push a project to GitHub via the terminal, except now we will be pushing the project to Heroku, not GitHub):</p>\n            <pre><code>\n                git init<br/>\n                git add .<br/>\n                git commit -m \"first commit\" <br/>\n            </code></pre>\n            <p>Now you have to create and initalise the application on Heroku.</p>\n            <pre><code>\n                heroku create stephen-doyles-api-app*\n            </code></pre>\n            \n            <p>*Call the app whatever you want here, although it has to be a unique name that no one has used on Heroku before.</p>\n            <p>After creating the app on Heroku, we can now store configuration variables, which are the same as environment variables. The key config variable we have to save is the MongoDB database URL, which can be saved in the terminal line with the following command:</p>\n            <pre><code>\n                heroku config:set DB_URL=mongodb+srv://atlas_account_username:atlas_account_password@cluster0.nimhz.mongodb.net/database_name \n            </code></pre>\n            <p>Now the app is ready to be deployed on the cloud with a simple push operation to the Heroku remote:</p>\n            <pre><code>    git push heroku master\n            </code></pre>\n            <p>If everything was successful, you will see a line saying that deployment was verified and done. You will also get a message something like this: 'https://stephen-doyles-api-app.herokuapp.com/ deployed to Heroku'. If this was a front end project, you would be able to visit this URL and see your site/app online, but as this is only a back end server right now, going to the page will only show an error message.</p>\n            <h4>The UI Application</h4>\n            <p>A similar set of steps are required to get the UI part of the code deployed on Heroku. Again, make sure you have the following line of code near the top of your ui server file:</p>\n            <pre><code>const port = process.env.PORT</code></pre>\n            <p>Also, in our code we have to change the API endpoint URL. In development mode, the API endpoint URL was on our locally hosted API server: http://localhost:5000/graphql. But now we will be getting our API endpoint from our recently deployed API application. In this case, it is: https://stephen-doyles-api-app.herokuapp.com/graphql. </p>\n            <p>Then you will be making the same set of git commands you made for the API application, except this time the terminal must be open in the UI folder, and not the API folder.</p>\n            <pre><code>\n                git init<br/>\n                git add .<br/>\n                git commit -m \"first commit\" <br/>\n            </code></pre>\n            <p>Now you have to create and initalise the application on Heroku.</p>\n            <pre><code>\n                heroku create stephen-doyles-ui-app\n            </code></pre>\n            <p>Now the app is ready to be deployed on the cloud with a simple push operation to the Heroku remote:</p>\n            <pre><code>    git push heroku master\n            </code></pre>\n            <p>If everything was successful, you will see a line saying that deployment was verified and done. You will also get a message something like this: 'https://stephen-doyles-ui-app.herokuapp.com/ deployed to Heroku'. As this is a front end app we can actually visit this URL and our project is now online for the world to visit.</p>\n            <h4>Making changes and updating your project</h4>\n            <p>So the above steps are how to deploy your lovely new full stack app to the internet using Heroku. But of course, you'll be making changes to your app over time, and improving it. How should you update your changes?</p>\n            <p>This couldn't be simpler. With the terminal open in the relevant foler (the API folder if you want to update the API app, or the UI folder if you want to update the UI app), simply repeat these three steps that you used to initally deploy the app:</p>\n            <pre><code>\n                git add .<br/>\n                git commit -m \"update\"<br/>\n                git push heroku master<br/>\n            </code></pre>\n            <p>And that's pretty much it!</p>\n\n            \n\n\n              \n              \n            </div>\n          </Col>\n        </Row>\n      </Container>\n         \n    );\n  }\n}\n\nexport default MernToHeroku;","import React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Home from './Home';\nimport NavBar from './NavBar';\nimport About from './About';\nimport Projects from './Projects';\nimport Blog from './Blog';\nimport Resources from './Resources';\nimport Humour from './Humour';\nimport Contact from './Contact';\nimport DeployingReact from './ArticlesComponents/DeployingReact';\nimport Notes from './Notes';\nimport AsyncJSArticle from \"./ArticlesComponents/AsnycJSArticle\";\nimport EnginesAndRuntime from \"./ArticlesComponents/EnginesAndRuntime\";\nimport ComponentTypes from \"./ArticlesComponents/ComponentTypes\";\nimport MERNSetUp1 from \"./ArticlesComponents/MERNSetUp1\";\nimport MERNSetUp2 from \"./ArticlesComponents/MERNSetUp2\";\nimport MERNSetUp3 from \"./ArticlesComponents/MERNSetUp3\";\nimport MERNSetUp4 from \"./ArticlesComponents/MERNSetUp4\";\nimport GraphQL from \"./ArticlesComponents/GraphQL\";\nimport GitCommands from \"./ArticlesComponents/GitCommands\";\nimport MernToHeroku from \"./ArticlesComponents/MernToHeroku\";\nimport { Route, Switch } from 'react-router-dom';\n\nconst App=()=>{\n\n  return(\n    <div>\n      <NavBar/>\n      \n      <Switch>\n          <Route path=\"/\" component={Home} exact />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/projects\" component={Projects} />\n          <Route path=\"/blog\" component={Blog} />\n          <Route path=\"/humour\" component={Humour} />\n          <Route path=\"/resources\" component={Resources} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/asyncjsarticle\" component={AsyncJSArticle}/>\n          <Route path=\"/deployingreact\" component={DeployingReact}/>\n          <Route path=\"/enginesandruntime\" component={EnginesAndRuntime}/>\n          <Route path=\"/componenttypes\" component={ComponentTypes}/>\n          <Route path=\"/mernsetup1\" component={MERNSetUp1}/>\n          <Route path=\"/mernsetup2\" component={MERNSetUp2}/>\n          <Route path=\"/mernsetup3\" component={MERNSetUp3}/>\n          <Route path=\"/mernsetup4\" component={MERNSetUp4}/>\n          <Route path=\"/graphql\" component={GraphQL}/>\n          <Route path=\"/merntoheroku\" component={MernToHeroku}/>\n          <Route path=\"/gitcommands\" component={GitCommands}/>\n\n          <Route path=\"/notes\" component={Notes}/>\n\n\n         \n      </Switch>\n        \n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { PureComponent } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nclass ScrollIntoView extends PureComponent {\n  componentDidMount = () => window.scrollTo(0, 0);\n\n  componentDidUpdate = prevProps => {\n    if (this.props.location !== prevProps.location) window.scrollTo(0, 0);\n  };\n\n  render = () => this.props.children;\n}\n\nexport default withRouter(ScrollIntoView);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter} from 'react-router-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ScrollIntoView from './ScrollIntoView';\n\n\n//The purpose of ScrollIntoView is to fix a routing bug in which when you click on a new page, the new page loads but will not automatically start the new page at the top. For example, if you have been on 'resources' page, and are currently viewing the bottom of the page, if you click on 'projects' page, that will reload near the bottom of the page. With ScrollIntoView component, new page auto loads at top. See  for more info.\n\nReactDOM.render(\n  <BrowserRouter>\n    <ScrollIntoView>\n    <App />\n    </ScrollIntoView>\n    \n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}